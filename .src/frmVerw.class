' Gambas class file

Private strDBName As String = frmAnmelden.strDBName                               ' DB Name übernehem
Private myConn As Connection = frmAnmelden.myConn                                 ' Datenbankverbindung übernehmen

Private rsSQLFirmen As Result                                                     ' sql Result Firmen
Private rsSQLKunden As Result                                                     ' sql Result Kunden
Private rsSQLLieferanten As Result                                                ' sql Result Lieferanten
Private rsSQLWaren As Result                                                      ' sql Result Waren
Private rsSQLcbxWaren As Result                                                   ' sql Result cbxWaren
Private rsSQLAP_Lieferanten As Result                                             ' sql Result AP-Lieferanten
Private rsSQLRechnung As Result                                                   ' sql Result Rechnung
Private rsSQLPOSRechnung As Result                                                ' sql Result Pos.-Rechnung

Private rsSQLKleinFA As Result                                                    ' sql Result bolKleinFA
Private rsSQLRechnungNr As Result                                                 ' sql Result RechnungNr
Private rsSQLAngebotNr As Result                                                  ' sql Result AngebotNr
Private rsSQLAngebotWareAendern As Result                                         ' sql Result Angebot Waren ändern wenn Rechnung
Private rsSQLWarenAbz As Result                                                   ' sql Result Waren abziehen
Private rsSQLTextRechnung As Result                                               ' sql Result Text-Rechnung

Private intNewFirmenIndex As Integer                                              ' Merker neuer Firmen-Index
Private intNewKundenIndex As Integer                                              ' Merker neuer Kunden-Index
Private intNewLieferantenIndex As Integer                                         ' Merker neuer Lieferanten-Index
Private intNewWarenIndex As Integer                                               ' Merker neuer Waren-Index
Private intNewAP_LieferantenIndex As Integer                                      ' Merker neuer AP_Lieferanten-Index
Private intNewRechNrIndex As Long                                                 ' Merker neue Rechnungsnr-Index
Private intNewRechPosIndex As Integer                                             ' Merker neue Positionen-Rechnungen-Index

Private strDatum As String                                                        ' aktuelles Datum
Private intJahrMonat As Integer                                                   ' Rechnungstartnummer JahrMonat
Private strLfdRNr As String                                                       ' Rechnungsnummer lfd. Nr
Private strRechnungsnummerF As String                                             ' Rechnungsnummer formatieren (besser lesbar)
Private strPrintRechDatum As String                                               ' Rechnungsdatum für die RechnungsNr, Format: JahrMonat (4stellig)

Private intDSAbhaengigkeit As Integer                                             ' Prüfe vor löschen auf Abhängigkeit
Private intMSG As Integer                                                         ' Abfrage für MessageBox

Private intStatus As Integer                                                      ' Status der Rechnung
Private bolMahnung As Boolean                                                     ' Rechnung als Mahnung
Private datEmpty As Date = Date(1970, 1, 1)                                       ' leere Datumsfelder (NULL geht leider nur im alten Gambas2)

Private floRechPosMenge As Float                                                  ' grvPositionenRechnung Menge
Private bolMsgRechSave As Boolean = True                                          ' Savemessage Rechnung ändern unterdrücken
Private bolKleinFA As Boolean                                                     ' Kleinunternehmen
Private strVerz As String                                                         ' Arbeitsverzeichniss dbKuWa3
Private strVerzBackup As String                                                   ' Arbeitsverzeichniss Backup
Private strVerzPDF As String                                                      ' Arbeitsverzeichniss PDF
Private mwst_erm_rechnung_proz As Float                                           ' MwSt% erm. aus der Rechnung lesen
Private mwst_voll_rechnung_proz As Float                                          ' MwSt% voll aus der Rechnung lesen
Private intPosRechRows As Integer                                                 ' grvPositionenRechnung Anzahl der Positionen (Druckeranpassung - Seite2)

Private myPrinter As New Printer As "myPrinter"                                   ' Drucker Objekt
Private intPixelmm As Float = 23.6                                                ' Drucker: ca. 23.6 Pixel/mm bei 600dpi
Private intPrinterX As Float = 210 * intPixelmm                                   ' DIN-A4 600dpi: x=horizontal (4961 Pixel) 210mm -> 23 Pixel/mm
Private intPrinterY As Float = 297 * intPixelmm                                   ' DIN-A4 600dpi: y=vertikal (7016 Pixel) 297mm -> 23 Pixel/mm
Private intPrinterF1 As Float = 100 * intPixelmm                                  ' DIN-A4 600dpi Faltmarke1: 105mm * 23 Pixel  (100mm ist besser!)
Private intPrinterF2 As Float = 215 * intPixelmm                                  ' DIN-A4 600dpi Faltmarke2: 210mm * 23 Pixel


'---------------------------------------------------------------------------------------------------------
'---------------------------------------------------------------------------------------------------------


Public Sub Form_Close()

     'Merker speichern
     Settings[strDBName & "/Verw/tabPanel1Pos"] = tabPanel1.Index                             ' Merker tabPanel1 Position
     Settings[strDBName & "/Verw/tabKundenPos"] = tabKunden.Index                             ' Merker tabKunden Position
     Settings[strDBName & "/Verw/tabWarenPos"] = tabWaren.Index                               ' Merker tabWaren Position
     Settings[strDBName & "/Verw/cbxRechnungFirmaNr"] = cbxRechnungFirmaNr.Text               ' Merker Rechnung FirmaNr

    Me.Close
    frmAnmelden.Show()
End

Public Sub mnuBeenden_Click()
    Form_Close()
End

Public Sub Form_Open()
 'Programmstart
Dim intMonat, intJahr, intKW As Integer

    'aktuelles Datum und KW nach ISO 8601
    strDatum = Format$(Now, "yyyy-mm-dd")
     If Week(Date(Now)) = 0 Then ' wenn 0 dann KW vom letzten Tag im Vorjahr
      intKW = Week(Date(Year(Now) - 1, 12, 31))
       Else
      intKW = Week(Date(Now))
     Endif
    txtAktuellesDatum.Text = "Heute: " & strDatum & " | KW: " & intKW


    'Startnummer für die Rechnung erzeugen
    intJahr = (Year(Now) - 2000) * 100
    intMonat = Month(Now)
    intJahrMonat = intJahr + intMonat  ' z.B. 1002 (Jahr 10, Monat 02)

    If intJahrMonat < 1001 Then ' wenn das Datum unter Jahr 2010
    intMSG = Message.Error("Fehler Systemdatum --> " & strDatum & " <--" & Chr(10) & "Das Datum ist kleiner als das Jahr 2010. Es können keine Rechnungen erstellt werden!", "Beenden", "Weiter")

    Select Case intMSG
    Case 1
      Form_Close()
       Return
    Case 2
       '
    End Select
    Endif



  frmAnmelden.Hide
  Me.Center
  Me.Text = "dbKuWa3 " & application.Version
  txtAktuelleDB.Text = frmAnmelden.cbxDBTyp.Text & " - " & strDBName



   'lade Texte für die Rechnung
   rsSQLTextRechnung = myConn.Exec("SELECT * FROM tblText_Rechnung")
   rsSQLTextRechnung.MoveFirst
   If rsSQLTextRechnung.Count = 0 Then Message.Error("Fehler in der mySQL-Tabelle tblText_Rechnung")

     txtAnredeHerr.Text = rsSQLTextRechnung!txt_anrede_herr
      txtAnredeFrau.Text = rsSQLTextRechnung!txt_anrede_frau
       txtAnredeFamilie.Text = rsSQLTextRechnung!txt_anrede_familie
        txtAnredeHerrDr.Text = rsSQLTextRechnung!txt_anrede_herrdr
         txtAnredeFrauDr.Text = rsSQLTextRechnung!txt_anrede_fraudr
          txtAnredeFirma.Text = rsSQLTextRechnung!txt_anrede_firma
           txtAnredeStadt.Text = rsSQLTextRechnung!txt_anrede_stadt
            txtAnredeGemeinde.Text = rsSQLTextRechnung!txt_anrede_gemeinde
            txtAnredeVerein.Text = rsSQLTextRechnung!txt_anrede_verein
           txtTextStatusRechnung.Text = rsSQLTextRechnung!txt_status_rechnung
          txtTextStatusAngebot.Text = rsSQLTextRechnung!txt_status_angebot
         ediTextEinleitung1.Text = rsSQLTextRechnung!txt_einleitung1
        ediTextEinleitung2.Text = rsSQLTextRechnung!txt_einleitung2
       ediTextMahnung.Text = rsSQLTextRechnung!txt_mahnung
      ediBemerkungRechnung2.Text = rsSQLTextRechnung!txt_bemerkung



  Firmen_einlesen()
  Kunden_einlesen()
  Lieferanten_einlesen()
  Waren_einlesen()
  AP_Lieferanten_einlesen()

  cbxRechnungFirmaNr_einlesen()
  Rechnungen_einlesen()
  Kunden_Rechnung_einlesen()
  Waren_Rechnung_einlesen()


  'Einstellungen laden (wichtig! erst hier laden!)
  tabPanel1.Index = Settings[strDBName & "/Verw/tabPanel1Pos", 0]                              ' Merker tabPanel1 Position
  tabKunden.Index = Settings[strDBName & "/Verw/tabKundenPos", 0]                              ' Merker tabKunden Position
  tabWaren.Index = Settings[strDBName & "/Verw/tabWarenPos", 0]                                ' Merker tabWaren Position
  cbxRechnungFirmaNr.Text = Settings[strDBName & "/Verw/cbxRechnungFirmaNr", 1]                ' Merker Rechnung FirmaNr

  txtEinstMwStErm.Text = Settings[strDBName & "/Einstellungen/MwStErm", 7.0]                   ' MwSt erm.
  txtEinstMwStVoll.Text = Settings[strDBName & "/Einstellungen/MwStVoll", 19.0]                ' MwSt voll
  chkEinstFaltmarkenRechnung.Value = Settings[strDBName & "/Drucker/FaltmarkenRechnung", True] ' Faltmarken Rechnung
  chkEinstLochmarkeRechnung.Value = Settings[strDBName & "/Drucker/LochmarkeRechnung", True]   ' Lochmarke Rechnung
  spnEinstSeitenanzahlRechnung.Value = Settings[strDBName & "/Drucker/Seitenanzahl", 1]        ' Seitenanzahl Rechnung
  spnEinst2teSeite.Value = Settings[strDBName & "/Drucker/2teSeite", 8]                        ' ab wann 2te Seite (x Rechn.Positionen)


  cbxFirmaKunde_einlesen()
  cbxWnBestandEinheit_einlesen()
  cbxWnBereich_einlesen()
  cbxWnKategorie_einlesen()
  cbxMwSt_einlesen()
  cbxRechnungBereich_einlesen()
  cbxWNLieferantRechnung_einlesen()


  If tabWaren.Index = 1 Then ' Waren
   Felder_Waren_leeren()
  Endif

    tabRechnung[1].Enabled = False
    tabRechnung[2].Enabled = False

  btn_Kunden(1, 0, 0, 0, 0)
  btn_Waren(1, 0, 0, 0, 0)
  btn_Rechnungen(1, 0, 0, 0, 0)
  btnAngebot.Visible = True


  'Datumsfelder - NULL geht nicht ;-(
    valRechnungsdatumRechnung.Value = datEmpty
     valBestelldatumRechnung.Value = datEmpty
      valLieferdatumRechnung.Value = datEmpty
       valZahlungsfristSkonto.Value = datEmpty
        valZahlungsfristRechnung.Value = datEmpty
         valZahlungseingangRechnung.Value = datEmpty





   'Warnmeldung wenn DB leer ist - z.B. nach einer neu Installation
   rsSQLKunden = myConn.Exec("SELECT id_kunde FROM tblKunden ORDER BY id_kunde ASC")
   rsSQLKunden.MoveLast
   If rsSQLKunden.Count = 0 Then
    Message.Warning("Beim ersten Start muss mindestens ein Datensatz" & Chr(10) & "im TAB 'Kunden' und 'Waren' angelegt werden," & Chr(10) & "sonst kommt es zum Abruch des Programms!")
    tabPanel1.Index = 0
    tabKunden.Index = 0
   Endif


End



' tabPanel Klick
Public Sub tabPanel1_Click()
Dim c As Integer

'Wenn eine Rechnung nicht gespeichert ist und ein TAB-Wechsel Ereignis, dann cancel:
If tabPanel1.Index = 0 Or tabPanel1.Index = 1 Or tabPanel1.Index = 3 And btnRechnungHinzufuegen.Enabled = True And valRechnungsnummer.Value > 0 Then
  btnRechnungNeu_Click()
  Return
Endif


'tabPanel Kunden Grundeinstellung
  If tabPanel1.Index = 0 Then
     If tabKunden.Index = 0 Then Felder_Firmen_leeren()
     If tabKunden.Index = 1 Then Felder_Kunden_leeren()
  Endif



'tabPanel Waren Grundeinstellung
  If tabPanel1.Index = 1 Then
     If tabWaren.Index = 0 Then Felder_Lieferanten_leeren()
     If tabWaren.Index = 1 Then Felder_Waren_leeren()
     If tabWaren.Index = 2 Then Felder_AP_Lieferanten_leeren()
  Endif




'tabPanel Rechnung / TAB Kunde aktuallisieren
  If tabPanel1.Index = 2 Then

        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden ORDER BY id_kunde")
        rsSQLKunden.MoveLast
        If rsSQLKunden.Count = 0 Then Return

        Kunden_Rechnung_einlesen()


  If chkFilterAdressentypRechnung.Value = True Then

      'sortieren
     Select Case cbxRechnungKundenSort.Text
       Case "Kd-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY id_kunde")
       Case "Firma-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY id_firma_kunde")
       Case "Anrede"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY anrede_kunde")
       Case "Name"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY name_kunde")
       Case "Vorname"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY vorname_kunde")
       Case "Adr.-Typ"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY adressentyp_kunde")
     End Select


    Else


      'sortieren
     Select Case cbxRechnungKundenSort.Text
       Case "Kd-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY id_kunde")
       Case "Firma-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY id_firma_kunde")
       Case "Anrede"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY anrede_kunde")
       Case "Name"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY name_kunde")
       Case "Vorname"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY vorname_kunde")
       Case "Adr.-Typ"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY adressentyp_kunde")
     End Select

  Endif

  If rsSQLKunden.Count = 0 Then Return

  grvKundenRechnung.Rows.Count = rsSQLKunden.Count + 1 'Anzahl DS Kunden in Rechnung

  For c = 1 To rsSQLKunden.Count  'Liste Kunden-Rechnung auf
    rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)
     grvKundenRechnung[c, 0].Alignment = Align.Right
     grvKundenRechnung[c, 0].Text = rsSQLKunden!id_kunde
     grvKundenRechnung[c, 1].Text = rsSQLFirmen!name_firma
     grvKundenRechnung[c, 2].Text = rsSQLKunden!anrede_kunde
     grvKundenRechnung[c, 3].Text = rsSQLKunden!name_kunde
     grvKundenRechnung[c, 4].Text = rsSQLKunden!vorname_kunde
     grvKundenRechnung[c, 5].Text = rsSQLKunden!adressentyp_kunde
    rsSQLKunden.MoveNext
  Next
  Endif



'tabPanel1 Kunden aktuallisieren
  If tabPanel1.Index = 0 Then
    Kunden_einlesen()
  Endif

'tabPanel1 Waren aktuallisieren
  If tabPanel1.Index = 1 Then
    Waren_einlesen()
  Endif

'tabPanel1 Waren Rechnung aktuallisieren
  If tabPanel1.Index = 2 Then
    Waren_Rechnung_einlesen()
    cbxWNLieferantRechnung_einlesen()
  Endif
End




'-----------------------------------------------------------------------------------
'-----------------------------------------------------------------------------------
'------------------------------Kunden----------------------------------------> Start





Public Sub btnKnHinzufuegen_Click()
  'SQL INSERT TO

 Select Case tabKunden.Index

 Case 0 'TAB Firmen

   If txtFirma.Text = "" Then
      Message.Info("Feld 'Firma' ist leer")
      txtFirma.SetFocus
      Return
   Endif

   rsSQLFirmen = myConn.Exec("INSERT INTO tblFirmen (id_firma, name_firma, adresse_firma, kontakt_firma, logo_firma, zahlungsziel_firma, skonto_firma, skonto_tage_firma, kleinunternehmen_firma, ust_idnr_firma, bankverbindung_firma, bemerkung_firma) " &
                    "Values(" & valFirmaNr.Value & ",'" & txtFirma.Text & "','" & txtFirmaAdresse.Text & "','" & ediFirmaKontakt.Text & "','" & txtFirmenLogo.Text & "'," &
                     spnZahlungszielRechnungen.Value & "," & spnSkontoRechnungen.Value & "," & spnSkontoTageRechnungen.Value & "," & chkKleinunternehmen.Value & ",'" & ediFirmaUSt_IdNr.Text & "','" & ediFirmaBankverbindung.Text & "','" & ediFirmaBemerkung.Text & "')")
   cbxRechnungFirmaNr_einlesen()
   Felder_Firmen_leeren()


'----------------------------------------------------

 Case 1 'TAB Kunden

   If txtKundeName.Text = "" Or cbxFirmaKunde.Text = "" Then
      Message.Info("Feld 'Name' oder 'Firma' ist leer")
      txtKundeName.SetFocus
      Return
   Endif

   rsSQLFirmen = myConn.Exec("INSERT INTO tblKunden (id_kunde, id_firma_kunde, adressentyp_kunde, anrede_kunde, name_kunde, vorname_kunde, abteilung_kunde, strasse_kunde, plz_kunde, ort_kunde, telefon_kunde, fax_kunde, email_kunde, email_kunde_senden, aktiv_kunde, ihrzeichen_kunde, bank_kunde, bemerkung_kunde)" &
                    "Values(" & valKundenNr.Value & ",'" & CLong(lblFirmaID.Text) & "','" & cbxKundeAdressentyp.Text & "','" & cbxKundeAnrede.Text & "','" & txtKundeName.Text & "','" &
                     txtKundeVorname.Text & "','" & txtKundeAbteilung.Text & "','" & txtKundeStrasse.Text & "','" & txtKundePLZ.Text & "','" & txtKundeOrt.Text & "','" &
                     txtKundeTelefon.Text & "','" & txtFaxKunde.Text & "','" & txtKundeEMail.Text & "'," & chkKundeEMailSenden.Value & "," & chkKundeAktiv.Value & ",'" & txtKundeIhrZeichen.Text & "','" & txtKundeBank.Text & "','" & txtKundeBemerkung.Text & "')")
   Felder_Kunden_leeren()

 End Select

   btn_Kunden(1, 0, 0, 0, 0)
End



Public Sub btnKnNeu_Click()
  Select Case tabKunden.Index

   Case 0 'TAB Firmen
   Felder_Firmen_leeren()

   Case 1 'TAB Kunden
   Felder_Kunden_leeren()

  End Select
End



Public Sub btnKnLoeschen_Click()
  'SQL DELETE FROM
  'Markierten Datensatz löschen
  Select Case tabKunden.Index

  Case 0 'TAB Firmen

  If valFirmaNr.Value > 0 Then

  rsSQLFirmen = myConn.Exec("SELECT id_firma FROM tblFirmen ORDER BY id_firma")
  rsSQLFirmen.MoveLast
  If rsSQLFirmen.Count = 1 Then 
    Message.Error("Sorry, mindestens ein Datensatz muss bleiben!")
    Return
  Endif

  'Prüfe vor löschen auf Abhängigkeit
  rsSQLKunden = myConn.Exec("SELECT id_firma_kunde FROM tblKunden WHERE id_firma_kunde=" & valFirmaNr.Value)
  intDSAbhaengigkeit = rsSQLKunden.Count
  If intDSAbhaengigkeit > 0 Then
  Message.Error("Achtung: Dieser Firma gehören " & intDSAbhaengigkeit & " Kunden an." & Chr(10) & "Eine Firma kann nur gelöscht werden, wenn ihr keine Kunden mehr zugeordnet sind.", "OK")
  Return
  Endif


    If Message.Question("Soll der ausgewählte Datensatz wirklich gelöscht werden?", "Ja", "Nein") = 1 Then
      If Message.Warning("Der Datensatz kann nicht wieder hergestellt werden." & Chr(10) & "Sind Sie sich sicher, dass Sie den Datensatz löschen wollen?", "Ja", "Nein") = 1 Then
      rsSQLFirmen = myConn.Exec("DELETE FROM tblFirmen WHERE id_firma=" & valFirmaNr.Value)

      Firmen_einlesen()
      grvFirma_Click()
      btn_Kunden(0, 1, 1, 1, 1)
     Endif
   Endif
  Endif

  'wenn DS = 0
  If grvFirma.Rows.Count = 1 Then
  Felder_Firmen_leeren()
  btn_Kunden(1, 0, 0, 0, 0)
  Endif

'----------------------------------------------------

  Case 1 'TAB Kunden

  If valKundenNr.Value > 0 Then


  rsSQLKunden = myConn.Exec("SELECT id_kunde FROM tblKunden ORDER BY id_kunde")
  rsSQLKunden.MoveLast
  If rsSQLKunden.Count = 1 Then 
    Message.Error("Sorry, mindestens ein Datensatz muss bleiben!")
    Return
  Endif


  'Prüfe vor löschen auf Abhängigkeit
  rsSQLFirmen = myConn.Exec("SELECT id_kunde_rechnung FROM tblFirma_Rechnung WHERE id_kunde_rechnung=" & valKundenNr.Value)
  intDSAbhaengigkeit = rsSQLFirmen.Count
  If intDSAbhaengigkeit > 0 Then
  Message.Error("Achtung: Für diesen Kunden gibt es " & intDSAbhaengigkeit & " Rechnungen." & Chr(10) & "Ein Kunde kann nur gelöscht werden, wenn es für diesen keine Rechnungen gibt.", "OK")
  Return
  Endif



    If Message.Warning("Soll der ausgewählte Datensatz wirklich gelöscht werden?", "Ja", "Nein") = 1 Then
      If Message.Warning("Der Datensatz kann nicht wieder hergestellt werden." & Chr(10) & "Sind Sie sich sicher, dass Sie den Datensatz löschen wollen?", "Ja", "Nein") = 1 Then
      rsSQLKunden = myConn.Exec("DELETE FROM tblKunden WHERE id_kunde=" & valKundenNr.Value)

      Kunden_einlesen()
      grvKunden_Click()
      btn_Kunden(0, 1, 1, 1, 1)
     Endif
   Endif
  Endif

  'wenn DS = 0
  If grvKunden.Rows.Count = 1 Then
  Felder_Kunden_leeren()
  btn_Kunden(1, 0, 0, 0, 0)
  Endif

  End Select
End



Public Sub btnKnAendern_Click()
  'SQL UPDATE
  'Geänderten Daten speichern
  Select Case tabKunden.Index

  Case 0 'TAB Firmen

  myConn.Exec("UPDATE tblFirmen SET name_firma='" & txtFirma.Text &
   "', adresse_firma='" & txtFirmaAdresse.Text &
   "', kontakt_firma='" & ediFirmaKontakt.Text &
   "', logo_firma='" & txtFirmenLogo.Text &
   "', zahlungsziel_firma='" & spnZahlungszielRechnungen.Value &
   "', skonto_firma='" & spnSkontoRechnungen.Value &
   "', skonto_tage_firma='" & spnSkontoTageRechnungen.Value &
   "', kleinunternehmen_firma='" & chkKleinunternehmen.Value &
   "', ust_idnr_firma='" & ediFirmaUSt_IdNr.Text &
   "', bankverbindung_firma='" & ediFirmaBankverbindung.Text &
   "', bemerkung_firma='" & ediFirmaBemerkung.Text &
   "' WHERE id_firma = " & valFirmaNr.Value)

      Firmen_einlesen()
      Kunden_einlesen()
      grvFirma_Click()

'----------------------------------------------------

  Case 1 'TAB Kunden

  myConn.Exec("UPDATE tblKunden SET id_firma_kunde='" & lblFirmaID.Text &
   "', adressentyp_kunde='" & cbxKundeAdressentyp.Text &
   "', anrede_kunde='" & cbxKundeAnrede.Text &
   "', name_kunde='" & txtKundeName.Text &
   "', vorname_kunde='" & txtKundeVorname.Text &
   "', abteilung_kunde='" & txtKundeAbteilung.Text &
   "', strasse_kunde='" & txtKundeStrasse.Text &
   "', plz_kunde='" & txtKundePLZ.Text &
   "', ort_kunde='" & txtKundeOrt.Text &
   "', telefon_kunde='" & txtKundeTelefon.Text &
   "', fax_kunde='" & txtFaxKunde.Text &
   "', email_kunde='" & txtKundeEMail.Text &
   "', email_kunde_senden='" & chkKundeEMailSenden.Value &
   "', aktiv_kunde='" & chkKundeAktiv.Value &
   "', ihrzeichen_kunde='" & txtKundeIhrZeichen.Text &
   "', bank_kunde='" & txtKundeBank.Text &
   "', bemerkung_kunde='" & txtKundeBemerkung.Text &
   "' WHERE id_kunde = " & valKundenNr.Value)

      Kunden_einlesen()
      grvKunden_Click()

  End Select
  Message.Info("Änderung gespeichert")
End



Public Sub btnKnKopieren_Click()
  'SQL SELECT
  'Aktuellen Datensatz kopieren und speichern

  Dim intID As Integer

  Select Case tabKunden.Index

  Case 0 'TAB Firmen

  rsSQLFirmen = myConn.Exec("SELECT id_firma FROM tblFirmen ORDER BY id_firma")
  rsSQLFirmen.MoveLast

  intID = rsSQLFirmen!id_firma + 1
  valFirmaNr.Value = intID

  txtFirma.Text = txtFirma.Text & "_Kopie"
  btnKnHinzufuegen_Click()

      Firmen_einlesen()
      grvFirma_Click()
      Message.Info("Firma als Nr. " & intID & " neu hinzugefügt. Bitte anpassen!")

'----------------------------------------------------

  Case 1 'TAB Kunden

  rsSQLKunden = myConn.Exec("SELECT id_kunde FROM tblKunden ORDER BY id_kunde")
  rsSQLKunden.MoveLast

  intID = rsSQLKunden!id_kunde + 1
  valKundenNr.Value = intID

  txtKundeName.Text = txtKundeName.Text & "_Kopie"
  btnKnHinzufuegen_Click()

      Kunden_einlesen()
      grvKunden_Click()
      Message.Info("Kunde als Nr. " & intID & " neu hinzugefügt. Bitte anpassen!")

  End Select
End



Public Sub picFirmenlogo_MouseDown()

  Dialog.Filter = ["*.jpg;*.jpeg", "JPG Files", "*.png", "PNG Files", "*.gif", "GIF Files"]
  Dialog.Path = User.Home
  Dialog.Title = "Firmenlogo verknüpfen"
   If Dialog.OpenFile() Then Return
   txtFirmenLogo.Text = Dialog.Path
End



Public Sub cbxFirmaKunde_MouseDown()

  If cbxFirmaKunde.Text = "" Then
    Message.Warning("Bitte erst eine Firma anlegen")
    tabKunden.Index = 0
  Endif
End



Public Sub grvFirma_Click()
 'Ausgewählten Datensatz markieren
  Dim y, z As Integer

  For y = 0 To grvFirma.Rows.Count - 1
  For z = 0 To grvFirma.Columns.Count - 1
    grvFirma[y, z].Background = Color.White
    grvFirma[y, z].Foreground = Color.Black
  Next
  Next

  For z = 0 To grvFirma.Columns.Count - 1
    grvFirma[grvFirma.Row, z].Background = Color.Gray
    grvFirma[grvFirma.Row, z].Foreground = Color.Blue
  Next


  'Datensatz in Formular einlesen
   If grvFirma.Row > 0 Then
    rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen WHERE id_firma=" & CLong(grvFirma[grvFirma.Row, 0].Text))
      valFirmaNr.Value = rsSQLFirmen!id_firma
      txtFirma.Text = rsSQLFirmen!name_firma
      txtFirmaAdresse.Text = rsSQLFirmen!adresse_firma
      ediFirmaKontakt.Text = rsSQLFirmen!kontakt_firma
      txtFirmenLogo.Text = rsSQLFirmen!logo_firma
      spnZahlungszielRechnungen.Value = rsSQLFirmen!zahlungsziel_firma
      spnSkontoRechnungen.Value = rsSQLFirmen!skonto_firma
      spnSkontoTageRechnungen.Value = rsSQLFirmen!skonto_tage_firma
      chkKleinunternehmen.Value = rsSQLFirmen!kleinunternehmen_firma
      ediFirmaUSt_IdNr.Text = rsSQLFirmen!ust_idnr_firma
      ediFirmaBankverbindung.Text = rsSQLFirmen!bankverbindung_firma
      ediFirmaBemerkung.Text = rsSQLFirmen!bemerkung_firma

      btn_Kunden(0, 1, 1, 1, 1)
   Endif
End


Public Sub grvKunden_Click()
 'Ausgewählten Datensatz markieren
  Dim y, z As Integer

  For y = 0 To grvKunden.Rows.Count - 1
  For z = 0 To grvKunden.Columns.Count - 1
    grvKunden[y, z].Background = Color.White
    grvKunden[y, z].Foreground = Color.Black
  Next
  Next

  For z = 0 To grvKunden.Columns.Count - 1
    Try grvKunden[grvKunden.Row, z].Background = Color.Gray
    Try grvKunden[grvKunden.Row, z].Foreground = Color.Blue
  Next


    rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden ORDER BY id_kunde ASC")
    rsSQLKunden.MoveLast
    If rsSQLKunden.Count = 0 Then Return


  'Datensatz in Formular einlesen
   If grvKunden.Row > 0 Then
   rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_kunde=" & CLong(grvKunden[grvKunden.Row, 0].Text))
   rsSQLFirmen = myConn.Exec("SELECT id_firma, name_firma FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)

    cbxFirmaKunde.Text = rsSQLFirmen!name_firma
    valKundenNr.Value = rsSQLKunden!id_kunde
    cbxKundeAdressentyp.Text = rsSQLKunden!adressentyp_kunde
    cbxKundeAnrede.Text = rsSQLKunden!anrede_kunde
    txtKundeName.Text = rsSQLKunden!name_kunde
    txtKundeVorname.Text = rsSQLKunden!vorname_kunde
    txtKundeAbteilung.Text = rsSQLKunden!abteilung_kunde
    txtKundeStrasse.Text = rsSQLKunden!strasse_kunde
    txtKundePLZ.Text = rsSQLKunden!plz_kunde
    txtKundeOrt.Text = rsSQLKunden!ort_kunde
    txtKundeTelefon.Text = rsSQLKunden!telefon_kunde
    txtFaxKunde.Text = rsSQLKunden!fax_kunde
    txtKundeEMail.Text = rsSQLKunden!email_kunde
    chkKundeEMailSenden.Value = rsSQLKunden!email_kunde_senden
    chkKundeAktiv.Value = rsSQLKunden!aktiv_kunde
    txtKundeIhrZeichen.Text = rsSQLKunden!ihrzeichen_kunde
    txtKundeBank.Text = rsSQLKunden!bank_kunde
    txtKundeBemerkung.Text = rsSQLKunden!bemerkung_kunde


    btn_Kunden(0, 1, 1, 1, 1)

   Endif
End



Public Sub chkFilterFirmaKunde_Click()
  'Liste "Kunden" filtern nach Firmen
  Felder_Kunden_leeren()
  valKundenNr.Value = intNewKundenIndex ' Merker
End

Public Sub cbxFirmaKunde_Click()

  ' Firmen ID aktualisieren
  rsSQLFirmen = myConn.Exec("SELECT name_firma, id_firma FROM tblFirmen WHERE name_firma='" & cbxFirmaKunde.Text & "'")
  If rsSQLFirmen.Count > 0 Then lblFirmaID.text = rsSQLFirmen!id_firma

End

Public Sub grvKunden_Change()
 If grvKunden.Rows.Count < 2 Then
   chkFilterFirmaKunde.Enabled = False
   Else
   chkFilterFirmaKunde.Enabled = True
 Endif
End


'------------------------- Funktionen Kunden ----------------------------------------------


Public Sub cbxFirmaSort_Click()
  Felder_Firmen_leeren()
End



Public Sub Felder_Firmen_leeren()
  txtFirma.Clear
  txtFirmaAdresse.Clear
  ediFirmaKontakt.Clear
  txtFirmenLogo.Clear
  ediFirmaUSt_IdNr.Text = "Steuernr.: "
  chkKleinunternehmen.Value = False
  ediFirmaBankverbindung.Clear
  ediFirmaBemerkung.Clear

  Firmen_einlesen()
End



Public Sub Firmen_einlesen()
 'SQL SELECT
  Dim c, y, z As Integer

   'Merker für neuen DS!
   rsSQLFirmen = myConn.Exec("SELECT id_firma FROM tblFirmen ORDER BY id_firma ASC")
   rsSQLFirmen.MoveLast
   If rsSQLFirmen.Count > 0 Then
    intNewFirmenIndex = rsSQLFirmen!id_firma + 1 ' Merker für neuen DS!
    valFirmaNr.Value = rsSQLFirmen!id_firma + 1
   Else
    valFirmaNr.Value = 1
   Endif

   If rsSQLFirmen.Count = 0 Then Return



    'sortieren?
     Select Case cbxFirmaSort.Text
       Case "Nr"
        rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen ORDER BY id_firma")
       Case "Firma"
        rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen ORDER BY name_firma")
       Case "Adresse"
        rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen ORDER BY adresse_firma")
     End Select




  'Spalten anlegen
  grvFirma.Columns.Count = 3
  grvFirma.Columns[0].Text = "Nr"
  grvFirma.Columns[1].Text = "Firma"
  grvFirma.Columns[2].Text = "Adresse"

  grvFirma.Rows.Count = rsSQLFirmen.Count + 1 'Anzahl DS Firmen

  grvFirma.Columns[0].Width = 40
  grvFirma.Columns[1].Width = 240
  grvFirma.Columns[2].Width = 120
  grvFirma.Rows[0].Height = 0 'Reihe 0 verstecken

  rsSQLFirmen.MoveFirst

  For c = 1 To rsSQLFirmen.Count  'Liste Firmen auf
  grvFirma[c, 0].Alignment = Align.Right
  grvFirma[c, 0].Text = Format$(rsSQLFirmen!id_firma, "00")
  grvFirma[c, 1].Text = rsSQLFirmen!name_firma
  grvFirma[c, 2].Text = rsSQLFirmen!adresse_firma
  rsSQLFirmen.MoveNext
  Next

  ' Tabellen Farben auf Standard setzen
  For y = 0 To grvFirma.Rows.Count - 1
  For z = 0 To grvFirma.Columns.Count - 1
    grvFirma[y, z].Background = Color.White
    grvFirma[y, z].Foreground = Color.Black
  Next
  Next

  grvFirma.ToolTip = "Anzahl: " & (grvFirma.Rows.Count - 1)
  btn_Kunden(1, 0, 0, 0, 0)
  cbxFirmaKunde_einlesen()
  txtFirma.SetFocus
End




Public Sub txtSuchenKunde_Change()

'SQL SELECT
  Dim c, y, z As Integer
  Dim strSuchen As String = "%" & txtSuchenKunde.Text & "%"


  If chkFilterFirmaKunde.Value = False Then
     Select Case cbxKundenSort.Text
       Case "Kd-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_kunde like '" & strSuchen & "' ORDER BY id_kunde")
       Case "Firma-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_firma_kunde like '" & strSuchen & "' ORDER BY id_firma_kunde")
       Case "Name"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE name_kunde like '" & strSuchen & "' ORDER BY name_kunde")
       Case "Vorname"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE vorname_kunde like '" & strSuchen & "' ORDER BY vorname_kunde")
       Case "Adr.-Typ"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE adressentyp_kunde like '" & strSuchen & "' ORDER BY adressentyp_kunde")
     End Select
  Else
     Select Case cbxKundenSort.Text
       Case "Kd-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_kunde like '" & strSuchen & "' AND id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY id_kunde")
       Case "Firma-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_firma_kunde like '" & strSuchen & "' AND id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY id_firma_kunde")
       Case "Name"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE name_kunde like '" & strSuchen & "' AND id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY name_kunde")
       Case "Vorname"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE vorname_kunde like '" & strSuchen & "' AND id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY vorname_kunde")
       Case "Adr.-Typ"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE adressentyp_kunde like '" & strSuchen & "' AND id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY adressentyp_kunde")
     End Select
  Endif


  grvKunden.Rows.Count = rsSQLKunden.Count + 1 'Anzahl DS Kunden

  rsSQLKunden.MoveFirst



  For c = 1 To rsSQLKunden.Count  'Liste Kunden auf
  rsSQLFirmen = myConn.Exec("SELECT id_firma, name_firma FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)
  grvKunden[c, 0].Alignment = Align.Right
  grvKunden[c, 0].Text = Format$(rsSQLKunden!id_kunde, "0000")
  grvKunden[c, 1].Text = rsSQLFirmen!name_firma
  grvKunden[c, 2].Text = rsSQLKunden!anrede_kunde
  grvKunden[c, 3].Text = rsSQLKunden!name_kunde
  grvKunden[c, 4].Text = rsSQLKunden!vorname_kunde
  grvKunden[c, 5].Text = rsSQLKunden!adressentyp_kunde
  rsSQLKunden.MoveNext
  Next


  ' Tabellen Farben auf Standard setzen
  For y = 0 To grvKunden.Rows.Count - 1
  For z = 0 To grvKunden.Columns.Count - 1
    grvKunden[y, z].Background = Color.White
    grvKunden[y, z].Foreground = Color.Black
  Next
  Next

  grvKunden.ToolTip = "Anzahl: " & (grvKunden.Rows.Count - 1)

End



Public Sub cbxKundenSort_Click()
  chkFilterFirmaKunde.Value = False
  Felder_Kunden_leeren()

     Select Case cbxKundenSort.Text
       Case "Kd-Nr"
        txtSuchenKunde.ToolTip = "filtern nach Kd-Nr"
       Case "Firma-Nr"
        txtSuchenKunde.ToolTip = "filtern nach Firma-Nr"
       Case "Name"
        txtSuchenKunde.ToolTip = "filtern nach Name"
       Case "Vorname"
        txtSuchenKunde.ToolTip = "filtern nach Vorname"
       Case "Adr.-Typ"
        txtSuchenKunde.ToolTip = "filtern nach Adr.-Typ"
     End Select
End




Public Sub Felder_Kunden_leeren()
  txtKundeName.Clear
  txtKundeVorname.Clear
  txtKundeAbteilung.Clear
  txtKundeStrasse.Clear
  txtKundePLZ.Clear
  txtKundeOrt.Clear
  txtKundeTelefon.Clear
  txtFaxKunde.Clear
  txtKundeEMail.Clear
  chkKundeEMailSenden.Value = False
  chkKundeAktiv.Value = True
  txtKundeIhrZeichen.Clear
  txtKundeBemerkung.Clear
  txtSuchenKunde.Clear

  Kunden_einlesen()
End



Public Sub Kunden_einlesen()
 'SQL SELECT
  Dim c, y, z As Integer

   'Merker für neuen DS!
   rsSQLKunden = myConn.Exec("SELECT id_kunde FROM tblKunden ORDER BY id_kunde ASC")
   rsSQLKunden.MoveLast
   If rsSQLKunden.Count > 0 Then
    intNewKundenIndex = rsSQLKunden!id_kunde + 1 ' Merker für neuen DS!
    valKundenNr.Value = rsSQLKunden!id_kunde + 1
   Else
    valKundenNr.Value = 1
    chkKundeAktiv.Value = True
   Endif

   If rsSQLKunden.Count = 0 Then Return


   If chkFilterFirmaKunde.Value = True Then
     'sortieren nach Firma
     Select Case cbxKundenSort.Text
       Case "Kd-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY id_kunde")
       Case "Firma-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY id_firma_kunde")
       Case "Name"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY name_kunde")
       Case "Vorname"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY vorname_kunde")
       Case "Adr.-Typ"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_firma_kunde='" & lblFirmaID.Text & "' ORDER BY adressentyp_kunde")
     End Select


      Else


     'sortieren
     Select Case cbxKundenSort.Text
       Case "Kd-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden ORDER BY id_kunde")
       Case "Firma-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden ORDER BY id_firma_kunde")
       Case "Name"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden ORDER BY name_kunde")
       Case "Vorname"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden ORDER BY vorname_kunde")
       Case "Adr.-Typ"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden ORDER BY adressentyp_kunde")
     End Select

   Endif




  'Spalten anlegen
  grvKunden.Columns.Count = 6
  grvKunden.Columns[0].Text = "Kd-Nr"
  grvKunden.Columns[1].Text = "Firma"
  grvKunden.Columns[2].Text = "Anrede"
  grvKunden.Columns[3].Text = "Name"
  grvKunden.Columns[4].Text = "Vorname"
  grvKunden.Columns[5].Text = "Adr.-Typ"

  grvKunden.Rows.Count = rsSQLKunden.Count + 1 'Anzahl DS Kunden

  grvKunden.Columns[0].Width = 60
  grvKunden.Columns[1].Width = 150
  grvKunden.Columns[2].Width = 60
  grvKunden.Columns[3].Width = 220
  grvKunden.Columns[4].Width = 180
  grvKunden.Columns[5].Width = 80
  grvKunden.Rows[0].Height = 0 'Reihe 0 verstecken

  rsSQLKunden.MoveFirst

  For c = 1 To rsSQLKunden.Count
  rsSQLFirmen = myConn.Exec("SELECT id_firma, name_firma FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)
  grvKunden[c, 0].Alignment = Align.Right
  grvKunden[c, 0].Text = Format$(rsSQLKunden!id_kunde, "0000")
  grvKunden[c, 1].Text = rsSQLFirmen!name_firma
  grvKunden[c, 2].Text = rsSQLKunden!anrede_kunde
  grvKunden[c, 3].Text = rsSQLKunden!name_kunde
  grvKunden[c, 4].Text = rsSQLKunden!vorname_kunde
  grvKunden[c, 5].Text = rsSQLKunden!adressentyp_kunde
  rsSQLKunden.MoveNext
  Next


  ' Tabellen Farben auf Standard setzen
  For y = 0 To grvKunden.Rows.Count - 1
  For z = 0 To grvKunden.Columns.Count - 1
    grvKunden[y, z].Background = Color.White
    grvKunden[y, z].Foreground = Color.Black
  Next
  Next

  grvKunden.ToolTip = "Anzahl: " & (grvKunden.Rows.Count - 1)
  btn_Kunden(1, 0, 0, 0, 0)
  txtKundeName.SetFocus
End



Public Sub btn_Kunden(KnHinzufuegen As Boolean, KnNeu As Boolean, KnLoeschen As Boolean, KnAendern As Boolean, KnKopieren As Boolean)
 'Buttons im TabStrip Kunden aktivieren/deaktivieren
  btnKnHinzufuegen.Enabled = KnHinzufuegen
  btnKnNeu.Enabled = KnNeu
  btnKnLoeschen.Enabled = KnLoeschen
  btnKnAendern.Enabled = KnAendern
  btnKnKopieren.Enabled = KnKopieren

    tabKunden[0].Text = "Firmen"
    tabKunden[1].Text = "Kunden"
End



Public Sub cbxFirmaKunde_einlesen()
 'Firmen "Kunden" in ComboBox einlesen
  Dim c As Integer

  cbxFirmaKunde.Clear
  rsSQLFirmen = myConn.Exec("SELECT name_firma FROM tblFirmen ORDER BY name_firma")

  If rsSQLFirmen.Count > 0 Then
     rsSQLFirmen.MoveFirst
  For c = 1 To rsSQLFirmen.Count
     If cbxFirmaKunde.Find(rsSQLFirmen!name_firma) = -1 Then
     cbxFirmaKunde.Add(rsSQLFirmen!name_firma)
     Endif
  rsSQLFirmen.MoveNext
  Next
  Endif

 cbxFirmaKunde_Click()  ' Firmen ID aktualisieren
End


'------------------------------Kunden----------------------------------------> Ende
'----------------------------------------------------------------------------------
'----------------------------------------------------------------------------------





'--------------------------------------------------------------------------------------





'------------------------------Waren----------------------------------------> Start
'----------------------------------------------------------------------------------
'----------------------------------------------------------------------------------



Public Sub tabWaren_MouseDown()
    'bei Tabwechsel: Grundeinstellung
     If tabWaren.Index = 0 Then Felder_Lieferanten_leeren()
     If tabWaren.Index = 1 Then Felder_Waren_leeren()
     If tabWaren.Index = 2 Then Felder_AP_Lieferanten_leeren()
End



Public Sub grvLieferanten_Click()
 'Ausgewählten Datensatz markieren
  Dim y, z As Integer

 'wurden Daten geändert?
  tabWaren_MouseDown()

  cbxWnKategorie_einlesen()

  For y = 0 To grvLieferanten.Rows.Count - 1
  For z = 0 To grvLieferanten.Columns.Count - 1
    grvLieferanten[y, z].Background = Color.White
    grvLieferanten[y, z].Foreground = Color.Black
  Next
  Next

  For z = 0 To grvLieferanten.Columns.Count - 1
    grvLieferanten[grvLieferanten.Row, z].Background = Color.Gray
    grvLieferanten[grvLieferanten.Row, z].Foreground = Color.Blue
  Next


  'Datensatz in Formular einlesen
   If grvLieferanten.Row > 0 Then
    rsSQLLieferanten = myConn.Exec("SELECT * FROM tblLieferanten WHERE id_lieferanten=" & CLong(grvLieferanten[grvLieferanten.Row, 0].Text))
      varWnLieferantNr.Value = rsSQLLieferanten!id_lieferanten
      txtWnLieferant.Text = rsSQLLieferanten!name_lieferanten
      txtWnLieferantZusatz.Text = rsSQLLieferanten!zusatz_lieferanten
      txtWnLieferantInternet.Text = rsSQLLieferanten!internet_lieferanten
      ediWnLieferantBemerkung.Text = rsSQLLieferanten!bemerkung_lieferanten

      btn_Waren(0, 1, 1, 1, 1)
   Endif
End



Public Sub grvWaren_Click()
 'Ausgewählten Datensatz markieren
  Dim y, z As Integer


 'wurden Daten geändert?
  tabWaren_MouseDown()

  For y = 0 To grvWaren.Rows.Count - 1
  For z = 0 To grvWaren.Columns.Count - 1
    grvWaren[y, z].Background = Color.White
    grvWaren[y, z].Foreground = Color.Black
  Next
  Next

  For z = 0 To grvWaren.Columns.Count - 1
    grvWaren[grvWaren.Row, z].Background = Color.Gray
    grvWaren[grvWaren.Row, z].Foreground = Color.Blue
  Next


  'Datensatz in Formular einlesen
   If grvWaren.Row > 0 Then

    rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE id_waren=" & CLong(grvWaren[grvWaren.Row, 0].Text))
      valWnWarenNr.Value = rsSQLWaren!id_waren
      cbxWnWarenLieferant.Text = rsSQLWaren!lieferant_waren
      cbxWnBereich.Text = rsSQLWaren!bereich_waren
      cbxWnKategorie.Text = rsSQLWaren!kategorie_waren
      txtWnBeschreibung.Text = rsSQLWaren!beschreibung_waren
      txtWnSpezifikation.Text = rsSQLWaren!spezifikation_waren
      chkWnNichtLagerArtikel.Value = rsSQLWaren!nichtlager_waren
      cbxWnMwStCode.Text = rsSQLWaren!mwst_waren_code
      txtWnEKnetto.Text = Format$(rsSQLWaren!preis_ek_netto_waren, "0.00")
      txtWnVKnetto.Text = Format$(rsSQLWaren!preis_vk_netto_waren, "0.00")
      txtWnPreisEKBrutto.Text = Format$(rsSQLWaren!preis_ek_brutto_waren, "0.00")
      txtWnPreisVKBrutto.Text = Format$(rsSQLWaren!preis_vk_brutto_waren, "0.00")
      txtWnBestandIst.Text = Format$(rsSQLWaren!bestand_waren, "0.0")
      txtWnBestandMin.Text = Format$(rsSQLWaren!mindestbestand_waren, "0.0")
      cbxWnBestandEinheit.Text = rsSQLWaren!einheit_waren
      ediWnWarBemerkung.Text = rsSQLWaren!bemerkung_waren


      btn_Waren(0, 1, 1, 1, 1)
   Endif
End



Public Sub grvAPLieferant_Click()
 'Ausgewählten Datensatz markieren
  Dim y, z As Integer

 'wurden Daten geändert?
  tabWaren_MouseDown()

  For y = 0 To grvAPLieferant.Rows.Count - 1
  For z = 0 To grvAPLieferant.Columns.Count - 1
    grvAPLieferant[y, z].Background = Color.White
    grvAPLieferant[y, z].Foreground = Color.Black
  Next
  Next

  For z = 0 To grvAPLieferant.Columns.Count - 1
    grvAPLieferant[grvAPLieferant.Row, z].Background = Color.Gray
    grvAPLieferant[grvAPLieferant.Row, z].Foreground = Color.Blue
  Next


  'Datensatz in Formular einlesen
   If grvAPLieferant.Row > 0 Then
    rsSQLLieferanten = myConn.Exec("SELECT * FROM tblAP_Lieferanten WHERE id_ap_lieferanten=" & CLong(grvAPLieferant[grvAPLieferant.Row, 0].Text))
      valWnAPNr.Value = rsSQLLieferanten!id_ap_lieferanten
      cbxWnAPLieferant.Text = rsSQLLieferanten!firma_ap_lieferanten
      cbxWnAPAnrede.Text = rsSQLLieferanten!anrede_ap_lieferanten
      txtWnAPName.Text = rsSQLLieferanten!name_ap_lieferanten
      txtWnAPVorname.Text = rsSQLLieferanten!vorname_ap_lieferanten
      txtWnAPAbteilung.Text = rsSQLLieferanten!abteilung_ap_lieferanten
      txtWnAPStr.Text = rsSQLLieferanten!strasse_ap_lieferanten
      txtWnAPPLZ.Text = rsSQLLieferanten!plz_ap_lieferanten
      txtWnAPOrt.Text = rsSQLLieferanten!ort_ap_lieferanten
      txtWnAPTel.Text = rsSQLLieferanten!telefon_ap_lieferanten
      txtWnAPFax.Text = rsSQLLieferanten!fax_ap_lieferanten
      txtWnAPEmail.Text = rsSQLLieferanten!email_ap_lieferanten
      ediWnAPBemerkung.Text = rsSQLLieferanten!bemerkung_ap_lieferanten

      btn_Waren(0, 1, 1, 1, 1)
   Endif
End



Public Sub btnWnHinzufuegen_Click()

  'SQL INSERT TO

 Select Case tabWaren.Index

 Case 0 'TAB Lieferanten

   If txtWnLieferant.Text = "" Then
      Message.Info("Feld 'Lieferant' ist leer")
      txtWnLieferant.SetFocus
      Return
   Endif

   rsSQLLieferanten = myConn.Exec("INSERT INTO tblLieferanten (id_lieferanten, name_lieferanten, zusatz_lieferanten, internet_lieferanten, bemerkung_lieferanten) " &
                    "Values(" & varWnLieferantNr.Value & ",'" & txtWnLieferant.Text & "','" & txtWnLieferantZusatz.Text & "','" & txtWnLieferantInternet.Text & "','" & ediWnLieferantBemerkung.Text & "')")
   Felder_Lieferanten_leeren()

'----------------------------------------------------

 Case 1 'TAB Waren

   If cbxWnWarenLieferant.Text = "" Then
      Message.Info("Feld 'Lieferant' ist leer")
      txtWnLieferant.SetFocus
      Return
   Endif

   If cbxWnBereich.Text = "" Then
      Message.Info("Feld 'Bereich' ist leer")
      cbxWnBereich.SetFocus
      Return
   Endif
   If cbxWnKategorie.Text = "" Then
      Message.Info("Feld 'Kategorie' ist leer")
      cbxWnKategorie.SetFocus
      Return
   Endif
   If txtWNBeschreibung.Text = "" Then
      Message.Info("Feld 'Beschreibung' ist leer")
      txtWNBeschreibung.SetFocus
      Return
   Endif

   rsSQLWaren = myConn.Exec("INSERT INTO tblWaren (id_waren, lieferant_waren, bereich_waren, kategorie_waren, beschreibung_waren, spezifikation_waren, nichtlager_waren, mwst_waren_code, preis_ek_netto_waren, preis_vk_netto_waren, preis_ek_brutto_waren, preis_vk_brutto_waren, bestand_waren, mindestbestand_waren, einheit_waren, bemerkung_waren) " &
                    "Values(" & valWnWarenNr.Value & ",'" & cbxWnWarenLieferant.Text & "','" & cbxWnBereich.Text & "','" & cbxWnKategorie.Text & "','" & txtWNBeschreibung.Text & "','" & txtWnSpezifikation.Text & "'," & chkWnNichtLagerArtikel.Value & ",'" & Val(cbxWnMwStCode.Text) & "','" & Val(txtWnEKnetto.Text) & "','" & Val(txtWnVKnetto.Text) & "','" & Val(txtWnPreisEKBrutto.Text) & "','" & Val(txtWnPreisVKBrutto.Text) & "','" & Val(txtWnBestandIst.Text) & "','" & Val(txtWnBestandMin.Text) & "','" & cbxWnBestandEinheit.Text & "','" & ediWnWarBemerkung.Text & "')")
   Felder_Waren_leeren()

'----------------------------------------------------

 Case 2 'TAB AP

   If txtWnAPName.Text = "" Then
      Message.Info("Feld 'Name' ist leer")
      txtWnAPName.SetFocus
      Return
   Endif

   rsSQLAP_Lieferanten = myConn.Exec("INSERT INTO tblAP_Lieferanten (id_ap_lieferanten, firma_ap_lieferanten, anrede_ap_lieferanten, name_ap_lieferanten, vorname_ap_lieferanten, abteilung_ap_lieferanten, strasse_ap_lieferanten, plz_ap_lieferanten, ort_ap_lieferanten, telefon_ap_lieferanten, fax_ap_lieferanten, email_ap_lieferanten, bemerkung_ap_lieferanten) " &
                    "Values(" & valWnAPNr.Value & ",'" & cbxWnAPLieferant.Text & "','" & cbxWnAPAnrede.Text & "','" & txtWnAPName.Text & "','" & txtWnAPVorname.Text & "','" & txtWnAPAbteilung.Text & "','" & txtWnAPStr.Text & "','" & txtWnAPPLZ.Text & "','" & txtWnAPOrt.Text & "','" & txtWnAPTel.Text & "','" & txtWnAPFax.Text & "','" & txtWnAPEmail.Text & "','" & ediWnAPBemerkung.Text & "')")
   Felder_AP_Lieferanten_leeren()

'----------------------------------------------------

 End Select

 btn_Waren(1, 0, 0, 0, 0)
End



Public Sub btnWnNeu_Click()

  Select Case tabWaren.Index

   Case 0 'TAB Lieferanten
   Felder_Lieferanten_leeren()

   Case 1 'TAB Waren
   Felder_Waren_leeren()

   Case 2 'TAB AP
   Felder_AP_Lieferanten_leeren()

  End Select

End



Public Sub btnWnLoeschen_Click()
  'SQL DELETE FROM
  'Markierten Datensatz löschen
  Select Case tabWaren.Index

  Case 0 'TAB Lieferanten

  If varWnLieferantNr.Value > 0 Then

  rsSQLLieferanten = myConn.Exec("SELECT id_lieferanten FROM tblLieferanten ORDER BY id_lieferanten")
  rsSQLLieferanten.MoveLast
  If rsSQLLieferanten.Count = 1 Then 
    Message.Error("Sorry, mindestens ein Datensatz muss bleiben!")
    Return
  Endif


  'Prüfe vor löschen auf Abhängigkeit Waren
  rsSQLWaren = myConn.Exec("SELECT lieferant_waren FROM tblWaren WHERE lieferant_waren='" & txtWnLieferant.Text & "'")
  intDSAbhaengigkeit = rsSQLWaren.Count
  If intDSAbhaengigkeit > 0 Then
  Message.Error("Achtung: Lieferant gehören " & intDSAbhaengigkeit & " Waren an." & Chr(10) & "Ein Lieferant kann nur gelöscht werden, wenn diesem keine Waren mehr zugeordnet sind.", "OK")
  Return
  Endif

  'Prüfe vor löschen auf Abhängigkeit AP
  rsSQLAP_Lieferanten = myConn.Exec("SELECT firma_ap_lieferanten FROM tblAP_Lieferanten WHERE firma_ap_lieferanten='" & txtWnLieferant.Text & "'")
  intDSAbhaengigkeit = rsSQLAP_Lieferanten.Count
  If intDSAbhaengigkeit > 0 Then
  Message.Error("Achtung: Lieferant hat " & intDSAbhaengigkeit & " Ansprechpartner." & Chr(10) & "Ein Lieferant kann nur gelöscht werden, wenn dieser kein Ansprechpartner mehr hat.", "OK")
  Return
  Endif


    If Message.Question("Soll der ausgewählte Datensatz wirklich gelöscht werden?", "Ja", "Nein") = 1 Then
      If Message.Warning("Der Datensatz kann nicht wieder hergestellt werden." & Chr(10) & "Sind Sie sich sicher, dass Sie den Datensatz löschen wollen?", "Ja", "Nein") = 1 Then
      rsSQLLieferanten = myConn.Exec("DELETE FROM tblLieferanten WHERE id_lieferanten=" & varWnLieferantNr.Value)

      Lieferanten_einlesen()
      grvLieferanten_Click()
      btn_Waren(0, 1, 1, 1, 1)
     Endif
   Endif
  Endif

  'wenn DS = 0
  If grvLieferanten.Rows.Count = 1 Then
  Felder_Lieferanten_leeren()
  btn_Waren(1, 0, 0, 0, 0)
  Endif

'----------------------------------------------------

  Case 1 'TAB Waren

  If valWnWarenNr.Value > 0 Then

  rsSQLWaren = myConn.Exec("SELECT id_waren FROM tblWaren ORDER BY id_waren")
  rsSQLWaren.MoveLast
  If rsSQLWaren.Count = 1 Then 
    Message.Error("Sorry, mindestens ein Datensatz muss bleiben!")
    Return
  Endif


    If Message.Question("Soll der ausgewählte Datensatz wirklich gelöscht werden?", "Ja", "Nein") = 1 Then
      If Message.Warning("Der Datensatz kann nicht wieder hergestellt werden." & Chr(10) & "Sind Sie sich sicher, dass Sie den Datensatz löschen wollen?", "Ja", "Nein") = 1 Then
      rsSQLWaren = myConn.Exec("DELETE FROM tblWaren WHERE id_waren=" & valWnWarenNr.Value)

      Waren_einlesen()
      grvWaren_Click()
      btn_Waren(0, 1, 1, 1, 1)
     Endif
   Endif
  Endif

  'wenn DS = 0
  If grvWaren.Rows.Count = 1 Then
  Felder_Waren_leeren()
  btn_Waren(1, 0, 0, 0, 0)
  Endif

'----------------------------------------------------

  Case 2 'TAB AP

  If valWnAPNr.Value > 0 Then

  rsSQLAP_Lieferanten = myConn.Exec("SELECT id_ap_lieferanten FROM tblAP_Lieferanten ORDER BY id_ap_lieferanten")
  rsSQLAP_Lieferanten.MoveLast
  If rsSQLAP_Lieferanten.Count = 1 Then 
    Message.Error("Sorry, mindestens ein Datensatz muss bleiben!")
    Return
  Endif

    If Message.Question("Soll der ausgewählte Datensatz wirklich gelöscht werden?", "Ja", "Nein") = 1 Then
      If Message.Warning("Der Datensatz kann nicht wieder hergestellt werden." & Chr(10) & "Sind Sie sich sicher, dass Sie den Datensatz löschen wollen?", "Ja", "Nein") = 1 Then
      rsSQLAP_Lieferanten = myConn.Exec("DELETE FROM tblAP_Lieferanten WHERE id_ap_lieferanten=" & valWnAPNr.Value)

      AP_Lieferanten_einlesen()
      grvAPLieferant_Click()
      btn_Waren(0, 1, 1, 1, 1)
     Endif
   Endif
  Endif

  'wenn DS = 0
  If grvAPLieferant.Rows.Count = 1 Then
  Felder_Lieferanten_leeren()
  btn_Waren(1, 0, 0, 0, 0)
  Endif

'----------------------------------------------------

  End Select

End



Public Sub btnWnAendern_Click()

  'SQL UPDATE
  'Geänderten Daten speichern
  Select Case tabWaren.Index

  Case 0 'TAB Lieferanten

  myConn.Exec("UPDATE tblLieferanten SET name_lieferanten='" & txtWnLieferant.Text &
   "', zusatz_lieferanten='" & txtWnLieferantZusatz.Text &
   "', internet_lieferanten='" & txtWnLieferantInternet.Text &
   "', bemerkung_lieferanten='" & ediWnLieferantBemerkung.Text &
   "' WHERE id_lieferanten = " & varWnLieferantNr.Value)

      Lieferanten_einlesen()
      grvLieferanten_Click()

'----------------------------------------------------

  Case 1 'TAB Waren

  myConn.Exec("UPDATE tblWaren SET lieferant_waren='" & cbxWnWarenLieferant.Text &
   "', bereich_waren='" & cbxWnBereich.Text &
   "', kategorie_waren='" & cbxWnKategorie.Text &
   "', beschreibung_waren='" & txtWNBeschreibung.Text &
   "', spezifikation_waren='" & txtWnSpezifikation.Text &
   "', nichtlager_waren='" & chkWnNichtLagerArtikel.Value &
   "', mwst_waren_code='" & Val(cbxWnMwStCode.Text) &
   "', preis_ek_netto_waren='" & Val(txtWnEKnetto.Text) &
   "', preis_vk_netto_waren='" & Val(txtWnVKnetto.Text) &
   "', preis_ek_brutto_waren='" & Val(txtWnPreisEKBrutto.Text) &
   "', preis_vk_brutto_waren='" & Val(txtWnPreisVKBrutto.Text) &
   "', bestand_waren='" & Val(txtWnBestandIst.Text) &
   "', mindestbestand_waren='" & Val(txtWnBestandMin.Text) &
   "', einheit_waren='" & cbxWnBestandEinheit.Text &
   "', bemerkung_waren='" & ediWnWarBemerkung.Text &
   "' WHERE id_waren = " & valWnWarenNr.Value)

      Waren_einlesen()
      grvWaren_Click()

'----------------------------------------------------

  Case 2 'TAB AP

    myConn.Exec("UPDATE tblAP_Lieferanten SET firma_ap_lieferanten='" & cbxWnAPLieferant.Text &
   "', anrede_ap_lieferanten='" & cbxWnAPAnrede.Text &
   "', name_ap_lieferanten='" & txtWnAPName.Text &
   "', vorname_ap_lieferanten='" & txtWnAPVorname.Text &
   "', abteilung_ap_lieferanten='" & txtWnAPAbteilung.Text &
   "', strasse_ap_lieferanten='" & txtWnAPStr.Text &
   "', plz_ap_lieferanten='" & txtWnAPPLZ.Text &
   "', ort_ap_lieferanten='" & txtWnAPOrt.Text &
   "', telefon_ap_lieferanten='" & txtWnAPTel.Text &
   "', fax_ap_lieferanten='" & txtWnAPFax.Text &
   "', email_ap_lieferanten='" & txtWnAPEmail.Text &
   "', bemerkung_ap_lieferanten='" & ediWnAPBemerkung.Text &
   "' WHERE id_ap_lieferanten = " & valWnAPNr.Value)

      AP_Lieferanten_einlesen()
      grvAPLieferant_Click()

'----------------------------------------------------

  End Select
  Message.Info("Änderung gespeichert")

End



Public Sub btnWnKopieren_Click()

  'SQL SELECT
  'Aktuellen Datensatz kopieren und speichern

  Dim intID As Integer

  Select Case tabWaren.Index

  Case 0 'TAB Lieferanten

  rsSQLLieferanten = myConn.Exec("SELECT id_lieferanten FROM tblLieferanten ORDER BY id_lieferanten")
  rsSQLLieferanten.MoveLast

  intID = rsSQLLieferanten!id_lieferanten + 1
  varWnLieferantNr.Value = intID

  txtWnLieferant.Text = txtWnLieferant.Text & "_Kopie"
  btnWnHinzufuegen_Click()

      Lieferanten_einlesen()
      grvLieferanten_Click()
      Message.Info("Lieferant als Nr. " & intID & " neu hinzugefügt. Bitte anpassen!")

'----------------------------------------------------

  Case 1 'TAB Waren

  rsSQLWaren = myConn.Exec("SELECT id_waren FROM tblWaren ORDER BY id_waren")
  rsSQLWaren.MoveLast

  intID = rsSQLWaren!id_waren + 1
  valWnWarenNr.Value = intID

  txtWNBeschreibung.Text = txtWNBeschreibung.Text & "_Kopie"
  btnWnHinzufuegen_Click()

      Waren_einlesen()
      grvWaren_Click()
      Message.Info("Ware als Nr. " & intID & " neu hinzugefügt. Bitte anpassen!")

'----------------------------------------------------

  Case 2 'TAB Ap

  rsSQLAP_Lieferanten = myConn.Exec("SELECT id_ap_lieferanten FROM tblAP_Lieferanten ORDER BY id_ap_lieferanten")
  rsSQLAP_Lieferanten.MoveLast

  intID = rsSQLAP_Lieferanten!id_ap_lieferanten + 1
  valWnAPNr.Value = intID

  txtWnAPName.Text = txtWnAPName.Text & "_Kopie"
  btnWnHinzufuegen_Click()

      AP_Lieferanten_einlesen()
      grvAPLieferant_Click()
      Message.Info("Lieferant als Nr. " & intID & " neu hinzugefügt. Bitte anpassen!")

'----------------------------------------------------

      End Select
End



Public Sub btnWnEK_Click()

  If btnWnEK.Value = False Then
  lblWnEKnetto.Hide
  txtWnEKnetto.Hide
  lblWnPreisEKBrutto.Hide
  txtWnPreisEKBrutto.Hide
  btnWnEK_BruttoInNetto.Hide
  btnWnEK_NettoInBrutto.Hide
  Else
  lblWnEKnetto.Show
  txtWnEKnetto.Show
  lblWnPreisEKBrutto.Show
  txtWnPreisEKBrutto.Show
  btnWnEK_BruttoInNetto.Show
  btnWnEK_NettoInBrutto.Show
  Endif
End



Public Sub cbxWnWarenLieferant_MouseDown()

  If cbxWnWarenLieferant.Text = "" Then
    Message.Warning("Bitte erst einen Lieferant anlegen")
    tabWaren.Index = 0
  Endif
End

Public Sub cbxWnAPLieferant_MouseDown()

  If cbxWnAPLieferant.Text = "" Then
    Message.Warning("Bitte erst einen Lieferant anlegen")
    tabWaren.Index = 0
  Endif
End

Public Sub chkWnAPFilter_Click()
  'Liste "Waren" filtern nach Lieferant
  Felder_AP_Lieferanten_leeren()
  valWnAPNr.Value = intNewAP_LieferantenIndex ' Merker
End


Public Sub grvAPLieferant_Change()
 If grvAPLieferant.Rows.Count < 2 Then
   chkWnAPFilter.Enabled = False
   Else
   chkWnAPFilter.Enabled = True
 Endif
End



Public Sub chkWnFilterLieferant_Click()
  'Liste "Waren" filtern nach Lieferant
  Felder_Waren_leeren()
  valWnWarenNr.Value = intNewWarenIndex ' Merker
End


Public Sub grvWaren_Change()
 If grvWaren.Rows.Count < 2 Then
   chkWnFilterLieferant.Enabled = False
   Else
   chkWnFilterLieferant.Enabled = True
 Endif
End




'Bestand ändern ----------------------->Start

Public Sub btnWnBestandEinlagern_Click()
 If txtWnBestandAendernMenge.Text = Null Then Return
  txtWnBestandIst.Text = Val(txtWnBestandIst.Text) + Val(txtWnBestandAendernMenge.Text)
   txtWnBestandAendernMenge.Text = 0

    Try txtWnBestandMin.Text = Format$(Str(txtWnBestandMin.Text), "0.0")
    Try txtWnBestandIst.Text = Format$(Str(txtWnBestandIst.Text), "0.0")
    Try txtWnBestandAendernMenge.Text = Format$(Str(txtWnBestandAendernMenge.Text), "0.0")

    txtWnBestandAendernMenge.SetFocus
    txtWnBestandAendernMenge.SelectAll
End

Public Sub btnWnBestandEntnehmen_Click()
 If txtWnBestandAendernMenge.Text = Null Then Return
  txtWnBestandIst.Text = Val(txtWnBestandIst.Text) - Val(txtWnBestandAendernMenge.Text)
   txtWnBestandAendernMenge.Text = 0

    Try txtWnBestandMin.Text = Format$(Str(txtWnBestandMin.Text), "0.0")
    Try txtWnBestandIst.Text = Format$(Str(txtWnBestandIst.Text), "0.0")
    Try txtWnBestandAendernMenge.Text = Format$(Str(txtWnBestandAendernMenge.Text), "0.0")

    txtWnBestandAendernMenge.SetFocus
    txtWnBestandAendernMenge.SelectAll
End
'Bestand ändern ----------------------->Ende





 'MwSt ------------------------------->Start

Public Sub btnWnVK_BruttoInNetto_Click()
 Dim mwst As Float

 Try mwst = Val(cbxWnMwStCode.Text)
 If mwst = Null Then Return

 If txtWnPreisVKBrutto.Text = Null Then Return
 'MwSt Code -> MwSt %
 If mwst = 1 Then mwst = Val(txtEinstMwStErm.Text)
 If mwst = 2 Then mwst = Val(txtEinstMwStVoll.Text)

 txtWnVKnetto.Text = Round(Val(txtWnPreisVKBrutto.Text) / (mwst + 100) * 100, -2)
 format_waren()
End

Public Sub btnWnEK_BruttoInNetto_Click()
 Dim mwst As Float

 Try mwst = Val(cbxWnMwStCode.Text)
 If mwst = Null Then Return

 If txtWnPreisEKBrutto.Text = Null Then Return
 'MwSt Code -> MwSt %
 If mwst = 1 Then mwst = Val(txtEinstMwStErm.Text)
 If mwst = 2 Then mwst = Val(txtEinstMwStVoll.Text)

 txtWnEKnetto.Text = Round(Val(txtWnPreisEKBrutto.Text) / (mwst + 100) * 100, -2)
 format_waren()
End

Public Sub btnWnVK_NettoInBrutto_Click()
 Dim mwst As Float

 Try mwst = Val(cbxWnMwStCode.Text)
 If mwst = Null Then Return

 If txtWnVKnetto.Text = Null Then Return
 'MwSt Code -> MwSt %
 If mwst = 1 Then mwst = Val(txtEinstMwStErm.Text)
 If mwst = 2 Then mwst = Val(txtEinstMwStVoll.Text)

 txtWnPreisVKBrutto.Text = Val(txtWnVKnetto.Text) + Round(Val(txtWnVKnetto.Text) * mwst / 100, -2)
 format_waren()
End

Public Sub btnWnEK_NettoInBrutto_Click()
 Dim mwst As Float

 Try mwst = Val(cbxWnMwStCode.Text)
 If mwst = Null Then Return

 'MwSt Code -> MwSt %
 If mwst = 1 Then mwst = Val(txtEinstMwStErm.Text)
 If mwst = 2 Then mwst = Val(txtEinstMwStVoll.Text)

 If txtWnEKnetto.Text = Null Then Return
 txtWnPreisEKBrutto.Text = Val(txtWnEKnetto.Text) + Round(Val(txtWnEKnetto.Text) * mwst / 100, -2)
 format_waren()
End

 'MwSt ------------------------------->Ende








 'KeyPress ------------------------------------------------->Start
 'nur Zahlen, Komma und Minus zulassen

Public Sub txtWnEKnetto_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif
End

Public Sub txtWnVKnetto_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif
End

Public Sub txtWnPreisEKBrutto_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif
End

Public Sub txtWnPreisVKBrutto_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif
End

Public Sub txtWnBestandIst_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif
End

Public Sub txtWnBestandMin_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif
End

Public Sub txtWnBestandAendernMenge_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif
End


 'KeyPress ------------------------------------------------->Ende











'------------------------- Funktionen Waren ----------------------------------------------


Public Sub Felder_Lieferanten_leeren()
  txtWnLieferant.Clear
  txtWnLieferantZusatz.Clear
  txtWnLieferantInternet.Clear
  ediWnLieferantBemerkung.Clear

  Lieferanten_einlesen()
End



Public Sub Felder_AP_Lieferanten_leeren()
  txtWnAPName.Clear
  txtWnAPVorname.Clear
  txtWnAPAbteilung.Clear
  txtWnAPStr.Clear
  txtWnAPPLZ.Clear
  txtWnAPOrt.Clear
  txtWnAPTel.Clear
  txtWnAPFax.Clear
  txtWnAPEmail.Clear
  ediWnAPBemerkung.Clear

  AP_Lieferanten_einlesen()
End


Public Sub Felder_Waren_leeren()
  txtWNBeschreibung.Clear
  txtWnSpezifikation.Clear
  ediWnWarBemerkung.Clear
  txtWnBestandIst.Text = "0.0"
  txtWnBestandMin.Text = "0.0"
  txtWnEKnetto.Text = "0.00"
  txtWnVKnetto.Text = "0.00"
  txtWnPreisEKBrutto.Text = "0.00"
  txtWnPreisVKBrutto.Text = "0.00"
  txtWnBestandAendernMenge.Text = "0.0"

  format_waren()
  Waren_einlesen()

  'new
  txtWnBeschreibung.SetFocus
End



Public Sub format_waren() ' formatiere Felder -> Punkt-Komma Problem Deutschland ;-(

  Try txtWnBestandIst.Text = Format$(Str(txtWnBestandIst.Text), "0.0")
  Try txtWnBestandMin.Text = Format$(Str(txtWnBestandMin.Text), "0.0")
  Try txtWnBestandAendernMenge.Text = Format$(Str(txtWnBestandAendernMenge.Text), "0.0")

  Try txtWnEKnetto.Text = Format$(Str(txtWnEKnetto.Text), "0.00")
  Try txtWnPreisEKBrutto.Text = Format$(Str(txtWnPreisEKBrutto.Text), "0.00")

  Try txtWnVKnetto.Text = Format$(Str(txtWnVKnetto.Text), "0.00")
  Try txtWnPreisVKBrutto.Text = Format$(Str(txtWnPreisVKBrutto.Text), "0.00")
End



Public Sub cbxLieferantenSort_Click()
  Felder_Lieferanten_leeren()
End



Public Sub Lieferanten_einlesen()
 'SQL SELECT
  Dim c, y, z As Integer


   'Merker für neuen DS!
   rsSQLLieferanten = myConn.Exec("SELECT id_lieferanten FROM tblLieferanten ORDER BY id_lieferanten ASC")
   rsSQLLieferanten.MoveLast
   If rsSQLLieferanten.Count > 0 Then
    intNewLieferantenIndex = rsSQLLieferanten!id_lieferanten + 1 ' Merker für neuen DS!
    varWnLieferantNr.Value = rsSQLLieferanten!id_lieferanten + 1
   Else
    varWnLieferantNr.Value = 1
   Endif

   If rsSQLLieferanten.Count = 0 Then Return


       'sortieren
     Select Case cbxLieferantenSort.Text
       Case "Nr"
        rsSQLLieferanten = myConn.Exec("SELECT * FROM tblLieferanten ORDER BY id_lieferanten")
       Case "Lieferant"
        rsSQLLieferanten = myConn.Exec("SELECT * FROM tblLieferanten ORDER BY name_lieferanten")
       Case "Zusatz"
        rsSQLLieferanten = myConn.Exec("SELECT * FROM tblLieferanten ORDER BY zusatz_lieferanten")
     End Select




  'Spalten anlegen
  grvLieferanten.Columns.Count = 3
  grvLieferanten.Columns[0].Text = "Nr"
  grvLieferanten.Columns[1].Text = "Lieferant"
  grvLieferanten.Columns[2].Text = "Zusatz"


  grvLieferanten.Rows.Count = rsSQLLieferanten.Count + 1 'Anzahl DS Lieferanten

  grvLieferanten.Columns[0].Width = 80
  grvLieferanten.Columns[1].Width = 250
  grvLieferanten.Columns[2].Width = 150
  grvLieferanten.Rows[0].Height = 0 'Reihe 0 verstecken

  rsSQLLieferanten.MoveFirst

  For c = 1 To rsSQLLieferanten.Count  'Liste Lieferanten auf
  grvLieferanten[c, 0].Alignment = Align.Right
  grvLieferanten[c, 0].Text = Format$(rsSQLLieferanten!id_lieferanten, "0000")
  grvLieferanten[c, 1].Text = rsSQLLieferanten!name_lieferanten
  grvLieferanten[c, 2].Text = rsSQLLieferanten!zusatz_lieferanten
  rsSQLLieferanten.MoveNext
  Next

  ' Tabellen Farben auf Standard setzen
  For y = 0 To grvLieferanten.Rows.Count - 1
  For z = 0 To grvLieferanten.Columns.Count - 1
    grvLieferanten[y, z].Background = Color.White
    grvLieferanten[y, z].Foreground = Color.Black
  Next
  Next

  grvLieferanten.ToolTip = "Anzahl: " & (grvLieferanten.Rows.Count - 1)
  btn_Waren(1, 0, 0, 0, 0)
  cbxWnWarenLieferant_einlesen()
  cbxWnAPLieferant_einlesen()
  txtWnLieferant.SetFocus
End



Public Sub cbxWarenSort_Click()
  Felder_Waren_leeren()
End



Public Sub Waren_einlesen()
 'SQL SELECT
  Dim c, y, z As Integer

   'Merker für neuen DS!
   rsSQLWaren = myConn.Exec("SELECT id_waren FROM tblWaren ORDER BY id_waren ASC")
   rsSQLWaren.MoveLast
   If rsSQLWaren.Count > 0 Then
    intNewWarenIndex = rsSQLWaren!id_waren + 1 ' Merker für neuen DS!
    valWnWarenNr.Value = rsSQLWaren!id_waren + 1
   Else
    valWnWarenNr.Value = 1
   Endif

   If rsSQLWaren.Count = 0 Then Return



   If chkWnFilterLieferant.Value = True Then

     'sortieren nach Lieferant
     Select Case cbxWarenSort.Text
       Case "Nr"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWnWarenLieferant.Text & "' ORDER BY id_waren")
       Case "Lieferant"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWnWarenLieferant.Text & "' ORDER BY lieferant_waren")
       Case "Bereich"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWnWarenLieferant.Text & "' ORDER BY bereich_waren")
       Case "Kategorie"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWnWarenLieferant.Text & "' ORDER BY kategorie_waren")
       Case "Beschreibung"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWnWarenLieferant.Text & "' ORDER BY beschreibung_waren")
       Case "Bestand"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWnWarenLieferant.Text & "' ORDER BY bestand_waren")
     End Select


      Else


     'sortieren
     Select Case cbxWarenSort.Text
       Case "Nr"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY id_waren")
       Case "Lieferant"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY lieferant_waren")
       Case "Bereich"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY bereich_waren")
       Case "Kategorie"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY kategorie_waren")
       Case "Beschreibung"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY beschreibung_waren")
       Case "Bestand"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY bestand_waren")
     End Select

   Endif


 If rsSQLWaren.Count = 0 Then
  Message.Warning("Keine Daten in 'Waren' vorhanden!")
  chkWnFilterLieferant.Value = False
  Return
 Endif


  'Spalten anlegen
  grvWaren.Columns.Count = 6
  grvWaren.Columns[0].Text = "Nr"
  grvWaren.Columns[1].Text = "Lieferant"
  grvWaren.Columns[2].Text = "Bereich"
  grvWaren.Columns[3].Text = "Kategorie"
  grvWaren.Columns[4].Text = "Beschreibung"
  grvWaren.Columns[5].Text = "Bestand"


  grvWaren.Rows.Count = rsSQLWaren.Count + 1 'Anzahl DS Waren

  grvWaren.Columns[0].Width = 80
  grvWaren.Columns[1].Width = 130
  grvWaren.Columns[2].Width = 130
  grvWaren.Columns[3].Width = 130
  grvWaren.Columns[4].Width = 220
  grvWaren.Columns[5].Width = 40
  grvWaren.Rows[0].Height = 0 'Reihe 0 verstecken

  rsSQLWaren.MoveFirst

  For c = 1 To rsSQLWaren.Count  'Liste Waren auf
  grvWaren[c, 0].Alignment = Align.Right
  grvWaren[c, 0].Text = Format$(rsSQLWaren!id_waren, "00000")
  grvWaren[c, 1].Text = rsSQLWaren!lieferant_waren
  grvWaren[c, 2].Text = rsSQLWaren!bereich_waren
  grvWaren[c, 3].Text = rsSQLWaren!kategorie_waren
  grvWaren[c, 4].Text = rsSQLWaren!beschreibung_waren
  grvWaren[c, 5].Alignment = Align.Right
   If rsSQLWaren!nichtlager_waren = False Then
    grvWaren[c, 5].Text = Format$(rsSQLWaren!bestand_waren, "0.0")
   Else
    grvWaren[c, 5].Text = "ns" ' non-stockable item
   Endif
  rsSQLWaren.MoveNext
  Next

  ' Tabellen Farben auf Standard setzen
  For y = 0 To grvWaren.Rows.Count - 1
  For z = 0 To grvWaren.Columns.Count - 1
    grvWaren[y, z].Background = Color.White
    grvWaren[y, z].Foreground = Color.Black
  Next
  Next

  grvWaren.ToolTip = "Anzahl: " & (grvWaren.Rows.Count - 1)

  cbxWnBestandEinheit_einlesen()
  cbxWnBereich_einlesen()
  cbxWnKategorie_einlesen()

  btn_Waren(1, 0, 0, 0, 0)
End



Public Sub btn_Waren(WnHinzufuegen As Boolean, WnNeu As Boolean, WnLoeschen As Boolean, WnAendern As Boolean, WnKopieren As Boolean)
 'Buttons im TabStrip Waren aktivieren/deaktivieren
  btnWnHinzufuegen.Enabled = WnHinzufuegen
  btnWnNeu.Enabled = WnNeu
  btnWnLoeschen.Enabled = WnLoeschen
  btnWnAendern.Enabled = WnAendern
  btnWnKopieren.Enabled = WnKopieren

    tabWaren[0].Text = "Lieferanten"
    tabWaren[1].Text = "Waren"
    tabWaren[2].Text = "Ansprechpartner"
End


Public Sub cbxAPSort_Click()
  Felder_AP_Lieferanten_leeren()
End



Public Sub AP_Lieferanten_einlesen()
 'SQL SELECT
  Dim c, y, z As Integer

   'Merker für neuen DS!
   rsSQLAP_Lieferanten = myConn.Exec("SELECT id_ap_lieferanten FROM tblAP_Lieferanten ORDER BY id_ap_lieferanten ASC")

   rsSQLAP_Lieferanten.MoveLast
   If rsSQLAP_Lieferanten.Count > 0 Then
    intNewAP_LieferantenIndex = rsSQLAP_Lieferanten!id_ap_lieferanten + 1 ' Merker für neuen DS!
    valWnAPNr.Value = rsSQLAP_Lieferanten!id_ap_lieferanten + 1
   Else
    valWnAPNr.Value = 1
   Endif

   If rsSQLAP_Lieferanten.count = 0 Then Return



   If chkWnAPFilter.Value = True Then

    'sortieren nach Lieferant?
     Select Case cbxAPSort.Text
       Case "Nr"
        rsSQLAP_Lieferanten = myConn.Exec("SELECT * FROM tblAP_Lieferanten WHERE firma_ap_lieferanten='" & cbxWnAPLieferant.Text & "' ORDER BY id_ap_lieferanten")
       Case "Lieferant"
        rsSQLAP_Lieferanten = myConn.Exec("SELECT * FROM tblAP_Lieferanten WHERE firma_ap_lieferanten='" & cbxWnAPLieferant.Text & "' ORDER BY id_ap_lieferanten")
       Case "Name"
        rsSQLAP_Lieferanten = myConn.Exec("SELECT * FROM tblAP_Lieferanten WHERE firma_ap_lieferanten='" & cbxWnAPLieferant.Text & "' ORDER BY name_ap_lieferanten")
       Case "Vorname"
        rsSQLAP_Lieferanten = myConn.Exec("SELECT * FROM tblAP_Lieferanten WHERE firma_ap_lieferanten='" & cbxWnAPLieferant.Text & "' ORDER BY vorname_ap_lieferanten")
     End Select


      Else


    'sortieren?
     Select Case cbxAPSort.Text
       Case "Nr"
        rsSQLAP_Lieferanten = myConn.Exec("SELECT * FROM tblAP_Lieferanten ORDER BY id_ap_lieferanten")
       Case "Lieferant"
        rsSQLAP_Lieferanten = myConn.Exec("SELECT * FROM tblAP_Lieferanten ORDER BY firma_ap_lieferanten")
       Case "Name"
        rsSQLAP_Lieferanten = myConn.Exec("SELECT * FROM tblAP_Lieferanten ORDER BY name_ap_lieferanten")
       Case "Vorname"
        rsSQLAP_Lieferanten = myConn.Exec("SELECT * FROM tblAP_Lieferanten ORDER BY vorname_ap_lieferanten")
     End Select

   Endif



 If rsSQLAP_Lieferanten.Count = 0 Then
  Message.Warning("Keine Daten in 'Ansprechpartner Lieferanten' vorhanden!")
  chkWnAPFilter.Value = False
  Return
 Endif


  'Spalten anlegen
  grvAPLieferant.Columns.Count = 6
  grvAPLieferant.Columns[0].Text = "Nr"
  grvAPLieferant.Columns[1].Text = "Lieferant"
  grvAPLieferant.Columns[2].Text = "Anrede"
  grvAPLieferant.Columns[3].Text = "Name"
  grvAPLieferant.Columns[4].Text = "Vorname"
  grvAPLieferant.Columns[5].Text = "Abteilung"


  grvAPLieferant.Rows.Count = rsSQLAP_Lieferanten.Count + 1 'Anzahl DS AP-Lieferanten

  grvAPLieferant.Columns[0].Width = 60
  grvAPLieferant.Columns[1].Width = 150
  grvAPLieferant.Columns[2].Width = 80
  grvAPLieferant.Columns[3].Width = 180
  grvAPLieferant.Columns[4].Width = 180
  grvAPLieferant.Columns[5].Width = 60
  grvAPLieferant.Rows[0].Height = 0 'Reihe 0 verstecken


  rsSQLAP_Lieferanten.MoveFirst

  For c = 1 To rsSQLAP_Lieferanten.Count  'AP-Lieferanten
  grvAPLieferant[c, 0].Alignment = Align.Right
  grvAPLieferant[c, 0].Text = Format$(rsSQLAP_Lieferanten!id_ap_lieferanten, "0000")
  grvAPLieferant[c, 1].Text = rsSQLAP_Lieferanten!firma_ap_lieferanten
  grvAPLieferant[c, 2].Text = rsSQLAP_Lieferanten!anrede_ap_lieferanten
  grvAPLieferant[c, 3].Text = rsSQLAP_Lieferanten!name_ap_lieferanten
  grvAPLieferant[c, 4].Text = rsSQLAP_Lieferanten!vorname_ap_lieferanten
  grvAPLieferant[c, 5].Text = rsSQLAP_Lieferanten!abteilung_ap_lieferanten
  rsSQLAP_Lieferanten.MoveNext
  Next

  ' Tabellen Farben auf Standard setzen
  For y = 0 To grvAPLieferant.Rows.Count - 1
  For z = 0 To grvAPLieferant.Columns.Count - 1
    grvAPLieferant[y, z].Background = Color.White
    grvAPLieferant[y, z].Foreground = Color.Black
  Next
  Next

  grvAPLieferant.ToolTip = "Anzahl: " & (grvAPLieferant.Rows.Count - 1)
  btn_Waren(1, 0, 0, 0, 0)
  txtWnAPName.SetFocus
End



Public Sub cbxWnWarenLieferant_einlesen()
 'Lieferanten in Waren ComboBox einlesen
  Dim c As Integer

  cbxWnWarenLieferant.Clear
  rsSQLLieferanten = myConn.Exec("SELECT name_lieferanten FROM tblLieferanten ORDER BY name_lieferanten")

  If rsSQLLieferanten.Count > 0 Then
     rsSQLLieferanten.MoveFirst
  For c = 1 To rsSQLLieferanten.Count
     If cbxWnWarenLieferant.Find(rsSQLLieferanten!name_lieferanten) = -1 Then
     cbxWnWarenLieferant.Add(rsSQLLieferanten!name_lieferanten)
     Endif
  rsSQLLieferanten.MoveNext
  Next
  Endif
End



Public Sub cbxWnAPLieferant_einlesen()
 'Lieferanten in AP ComboBox einlesen
  Dim c As Integer

  cbxWnAPLieferant.Clear
  rsSQLLieferanten = myConn.Exec("SELECT name_lieferanten FROM tblLieferanten ORDER BY name_lieferanten")

  If rsSQLLieferanten.Count > 0 Then
     rsSQLLieferanten.MoveFirst
  For c = 1 To rsSQLLieferanten.Count
     If cbxWnAPLieferant.Find(rsSQLLieferanten!name_lieferanten) = -1 Then
     cbxWnAPLieferant.Add(rsSQLLieferanten!name_lieferanten)
     Endif
  rsSQLLieferanten.MoveNext
  Next
  Endif
End



Public Sub cbxWnBestandEinheit_einlesen()
'Einheit "Waren" in ComboBox einlesen
Dim c As Integer

  cbxWnBestandEinheit.Clear
  rsSQLWaren = myConn.Exec("SELECT einheit_waren FROM tblWaren ORDER BY einheit_waren")
  If rsSQLWaren.Count > 0 Then
     rsSQLWaren.MoveFirst
  For c = 1 To rsSQLWaren.Count

  If cbxWnBestandEinheit.Find(rsSQLWaren!einheit_waren) = -1 Then
  cbxWnBestandEinheit.Add(rsSQLWaren!einheit_waren)
  Endif
  rsSQLWaren.MoveNext
  Next
  Endif
End



Public Sub cbxWnBereich_einlesen()
'Bereich in ComboBox einlesen
Dim c As Integer

  cbxWnBereich.Clear

   If chkWnFilterLieferant.Value = True Then
   rsSQLWaren = myConn.Exec("SELECT bereich_waren FROM tblWaren WHERE lieferant_waren='" & cbxWnWarenLieferant.Text & "' ORDER BY bereich_waren")

      Else

   rsSQLWaren = myConn.Exec("SELECT bereich_waren FROM tblWaren ORDER BY bereich_waren")
   Endif


  If rsSQLWaren.Count > 0 Then
     rsSQLWaren.MoveFirst
  For c = 1 To rsSQLWaren.Count

  If cbxWnBereich.Find(rsSQLWaren!bereich_waren) = -1 Then
  cbxWnBereich.Add(rsSQLWaren!bereich_waren)
  Endif
  rsSQLWaren.MoveNext
  Next
  Endif
End




Public Sub cbxWnBereich_Click()
 cbxWnKategorie_einlesen()
End

Public Sub cbxWnKategorie_einlesen()
'Kategorie in ComboBox einlesen
Dim c As Integer

  cbxWnKategorie.Clear

  'Kategorie nach Bereich filtern
   If chkWnFilterLieferant.Value = True Then
   rsSQLcbxWaren = myConn.Exec("SELECT kategorie_waren FROM tblWaren WHERE bereich_waren='" & cbxWnBereich.Text & "' AND lieferant_waren='" & cbxWnWarenLieferant.Text & "' ORDER BY kategorie_waren")

      Else

   rsSQLcbxWaren = myConn.Exec("SELECT kategorie_waren FROM tblWaren WHERE bereich_waren='" & cbxWnBereich.Text & "' ORDER BY kategorie_waren")
   Endif



  If rsSQLcbxWaren.Count > 0 Then
     rsSQLcbxWaren.MoveFirst
  For c = 1 To rsSQLcbxWaren.Count

  If cbxWnKategorie.Find(rsSQLcbxWaren!kategorie_waren) = -1 Then
  cbxWnKategorie.Add(rsSQLcbxWaren!kategorie_waren)
  Endif
  rsSQLcbxWaren.MoveNext
  Next
  Endif
End



Public Sub cbxMwSt_einlesen()
'MwSt Code in ComboBox einlesen
  cbxWnMwStCode.ReadOnly = False
  cbxMwStFreiWarenRechnung.ReadOnly = False

  'Waren
   cbxWnMwStCode.Clear
   cbxWnMwStCode.Add(2)
   cbxWnMwStCode.Add(1)


  'Rechnungen
  If bolKleinFA = True Then
   cbxMwStFreiWarenRechnung.Clear
   cbxMwStFreiWarenRechnung.Add(0)
  Else
   cbxMwStFreiWarenRechnung.Clear
   cbxMwStFreiWarenRechnung.Add(txtEinstMwStVoll.Text)
   cbxMwStFreiWarenRechnung.Add(txtEinstMwStErm.Text)
  Endif

   cbxWnMwStCode.ReadOnly = True
   cbxMwStFreiWarenRechnung.ReadOnly = True
End



'------------------------------Waren----------------------------------------> Ende
'---------------------------------------------------------------------------------
'---------------------------------------------------------------------------------



'---------------------------------------------------------------------------------



'-----------------------------------------------------------------------------------
'-----------------------------------------------------------------------------------
'------------------------------Rechnung--------------------------------------> Start



Public Sub Filter_Rechnung_Click()
  btnRechnungNeu_Click()
End


Public Sub Status_Rechnung_Click()
  Angebot()
End


Public Sub cbxRechnungFirmaNr_Click()
  Rechnungen_einlesen()
End


Public Sub Rechnungen_einlesen()
 'SQL SELECT
  Dim c, y, z As Integer
  Dim datTermin As Date


 'wenn noch kein DS vorhanden, dann ABRUCH!
 rsSQLRechnung = myConn.Exec("SELECT id_rechnung FROM tblFirma_Rechnung")
 If rsSQLRechnung.Count = 0 Then Return


  'Rechnungen filtern, sortiere letzte Rechnung oben.RechnungOffen ist Standard!
  If radRechnungAlle.Value = True Then rsSQLRechnung = myConn.Exec("SELECT * FROM tblFirma_Rechnung WHERE id_firma_rechnung = " & CInt(cbxRechnungFirmaNr.Text) & " ORDER BY id_rechnung DESC")
  If radRechnungOffen.Value = True Then rsSQLRechnung = myConn.Exec("SELECT * FROM tblFirma_Rechnung WHERE status_rechnung = 10 AND id_firma_rechnung=" & CInt(cbxRechnungFirmaNr.Text) & " ORDER BY id_rechnung DESC")
  If radRechnungVerzug.Value = True Then rsSQLRechnung = myConn.Exec("SELECT * FROM tblFirma_Rechnung WHERE status_rechnung = 10 AND zahlungsfrist_rechnung < '" & Format$(Date, "yyyy-mm-dd") & "' AND id_firma_rechnung=" & CInt(cbxRechnungFirmaNr.Text) & " ORDER BY id_rechnung DESC")
  If radRechnungAlleBez.Value = True Then rsSQLRechnung = myConn.Exec("SELECT * FROM tblFirma_Rechnung WHERE status_rechnung = 20 AND id_firma_rechnung=" & CInt(cbxRechnungFirmaNr.Text) & " ORDER BY id_rechnung DESC")
  If radRechnungAngebot.Value = True Then rsSQLRechnung = myConn.Exec("SELECT * FROM tblFirma_Rechnung WHERE status_rechnung = 30 AND id_firma_rechnung=" & CInt(cbxRechnungFirmaNr.Text) & " ORDER BY id_rechnung DESC")
  If radRechnungCancel.Value = True Then rsSQLRechnung = myConn.Exec("SELECT * FROM tblFirma_Rechnung WHERE status_rechnung = 99 AND id_firma_rechnung=" & CInt(cbxRechnungFirmaNr.Text) & " ORDER BY id_rechnung DESC")



  If radRechnungLaufzeit.Value = False Then
     'Spalten anlegen


      If rsSQLRechnung.Count = 0 Then
        grvRechnungen.Rows.Count = 0
        Else
        grvRechnungen.Rows.Count = rsSQLRechnung.Count + 1
      Endif
      grvRechnungen.Columns.Count = 4
      grvRechnungen.Columns[0].Text = "Nr"
      grvRechnungen.Columns[1].Text = "Firma"
      grvRechnungen.Columns[2].Text = "Projekt"
      grvRechnungen.Columns[3].Text = "RechDatum"

      grvRechnungen.Columns[0].Width = 80
      grvRechnungen.Columns[1].Width = 130
      grvRechnungen.Columns[2].Width = 220
      grvRechnungen.Columns[3].Width = 60
      grvRechnungen.Rows[0].Height = 0

      rsSQLRechnung.MoveFirst


      'Liste Rechnungen auf
      For c = 1 To rsSQLRechnung.Count
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_kunde=" & rsSQLRechnung!id_kunde_rechnung) ' ID Kunde
        rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)      ' ID Firma
        grvRechnungen[c, 0].Alignment = Align.Right
        grvRechnungen[c, 0].Text = rsSQLRechnung!id_rechnung
        grvRechnungen[c, 1].Text = rsSQLFirmen!name_firma           ' query ID Kunde + ID Firma (rsSQLRechnung + rsSQLKunden)
        grvRechnungen[c, 2].Text = rsSQLRechnung!projekt_rechnung
        grvRechnungen[c, 3].Alignment = Align.Right
          If rsSQLRechnung!rechnungsdatum_rechnung = Null Then      ' Datum nur formatieren wenn nicht NULL (sonst error)
            grvRechnungen[c, 3].Text = Null
          Else
            grvRechnungen[c, 3].Text = Format$(rsSQLRechnung!rechnungsdatum_rechnung, "yyyy-mm-dd")
          Endif
       rsSQLRechnung.MoveNext
      Next


  Else   'Rechnungen mit Laufzeiten nach Datum sortieren

   rsSQLRechnung = myConn.Exec("SELECT id_rechnung, id_kunde_rechnung, id_firma_rechnung, projekt_rechnung, rechnungsdatum_rechnung, laufzeit_rechnung, DATE_ADD(lieferdatum_rechnung, INTERVAL laufzeit_rechnung MONTH) AS nextbill FROM tblFirma_Rechnung WHERE status_rechnung < 30 AND laufzeit_rechnung > 0 AND id_firma_rechnung=" & CInt(cbxRechnungFirmaNr.Text) & " ORDER BY nextbill ASC")

     'Spalten anlegen
      If rsSQLRechnung.Count = 0 Then
        grvRechnungen.Rows.Count = 0
        Else
        grvRechnungen.Rows.Count = rsSQLRechnung.Count + 1
      Endif
      grvRechnungen.Columns.Count = 4
      grvRechnungen.Columns[0].Text = "Nr"
      grvRechnungen.Columns[1].Text = "Firma"
      grvRechnungen.Columns[2].Text = "Projekt"
      grvRechnungen.Columns[3].Text = "Nächster Termin"

      grvRechnungen.Columns[0].Width = 80
      grvRechnungen.Columns[1].Width = 130
      grvRechnungen.Columns[2].Width = 220
      grvRechnungen.Columns[3].Width = 60
      grvRechnungen.Rows[0].Height = 0

      rsSQLRechnung.MoveFirst


      'Liste Rechnungen auf
      For c = 1 To rsSQLRechnung.Count
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_kunde=" & rsSQLRechnung!id_kunde_rechnung) ' ID Kunde
        rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)      ' ID Firma
        grvRechnungen[c, 0].Alignment = Align.Right
        grvRechnungen[c, 0].Text = rsSQLRechnung!id_rechnung
        grvRechnungen[c, 1].Text = rsSQLFirmen!name_firma           ' query ID Kunde + ID Firma (rsSQLRechnung + rsSQLKunden)
        grvRechnungen[c, 2].Text = rsSQLRechnung!projekt_rechnung
        grvRechnungen[c, 3].Alignment = Align.Right
          If rsSQLRechnung!rechnungsdatum_rechnung = Null Then      ' Datum nur formatieren wenn nicht NULL (sonst Error)
            grvRechnungen[c, 3].Text = Null
          Else

            'Nächster Termin (nextbill) ist das Lieferdatum plus die Monatslaufzeit
           ' datTermin = DateAdd(rsSQLRechnung!nextbill, gb.Month, rsSQLRechnung!laufzeit_rechnung)
            datTermin = rsSQLRechnung!nextbill
            grvRechnungen[c, 3].Text = Format$(datTermin, "yyyy-mm-dd")

          Endif
       rsSQLRechnung.MoveNext
      Next

  Endif




  For y = 0 To grvRechnungen.Rows.Count - 1
  For z = 0 To grvRechnungen.Columns.Count - 1
    grvRechnungen[y, z].Background = Color.White
    grvRechnungen[y, z].Foreground = Color.Black
  Next
  Next


  grvRechnungen.ToolTip = "Anzahl: " & (grvRechnungen.Rows.Count - 1)

End




Public Sub txtSuchenRechnung_Change()
 'SQL SELECT
  Dim c, y, z As Integer
  Dim strSuchen As String = "%" & txtSuchenRechnung.Text & "%"

     chkFilterAdressentypRechnung.Value = False

     Select Case cbxRechnungKundenSort.Text
       Case "Kd-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND  id_kunde like '" & strSuchen & "' ORDER BY id_kunde")
       Case "Firma-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND  id_firma_kunde like '" & strSuchen & "' ORDER BY id_firma_kunde")
       Case "Anrede"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND  anrede_kunde like '" & strSuchen & "' ORDER BY anrede_kunde")
       Case "Name"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND  name_kunde like '" & strSuchen & "' ORDER BY name_kunde")
       Case "Vorname"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND  vorname_kunde like '" & strSuchen & "' ORDER BY vorname_kunde")
       Case "Adr.-Typ"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND  adressentyp_kunde like '" & strSuchen & "' ORDER BY adressentyp_kunde")
     End Select

  grvKundenRechnung.Rows.Count = rsSQLKunden.Count + 1 'Anzahl DS Kunden in Rechnung

  rsSQLKunden.MoveFirst


  For c = 1 To rsSQLKunden.Count  'Liste Kunden-Rechnung auf
    rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)
    grvKundenRechnung[c, 0].Alignment = Align.Right
    grvKundenRechnung[c, 0].Text = rsSQLKunden!id_kunde
    grvKundenRechnung[c, 1].Text = rsSQLFirmen!name_firma
    grvKundenRechnung[c, 2].Text = rsSQLKunden!anrede_kunde
    grvKundenRechnung[c, 3].Text = rsSQLKunden!name_kunde
    grvKundenRechnung[c, 4].Text = rsSQLKunden!vorname_kunde
    grvKundenRechnung[c, 5].Text = rsSQLKunden!adressentyp_kunde
    rsSQLKunden.MoveNext
  Next


  ' Tabellen Farben auf Standard setzen
  For y = 0 To grvKundenRechnung.Rows.Count - 1
  For z = 0 To grvKundenRechnung.Columns.Count - 1
    grvKundenRechnung[y, z].Background = Color.White
    grvKundenRechnung[y, z].Foreground = Color.Black
  Next
  Next

  grvKundenRechnung.ToolTip = "Anzahl: " & (grvKundenRechnung.Rows.Count - 1)

End

Public Sub txtSuchenRechnung_Enter()
  If btnRechnungHinzufuegen.Enabled = False Then
    txtSuchenRechnung.Enabled = False
    Return
  Else
    txtSuchenRechnung.Enabled = True
    'txtSuchenRechnung.Clear
    'txtSuchenRechnung.SetFocus
  Endif
End




Public Sub chkFilterAdressentypRechnung_Click()
  Kunden_Rechnung_einlesen()

  If chkFilterAdressentypRechnung.Value = True Then
   cbxAdressentypRechnungKunde.Enabled = True
   txtSuchenRechnung.Clear
  Else
   cbxAdressentypRechnungKunde.Enabled = False
  Endif
End


Public Sub cbxAdressentypRechnungKunde_Click()
  If chkFilterAdressentypRechnung.Value = True Then chkFilterAdressentypRechnung_Click()
End

Public Sub cbxRechnungKundenSort_Click()
     Felder_Kunde_Rechnung_leeren()

     Select Case cbxRechnungKundenSort.Text
       Case "Kd-Nr"
        txtSuchenRechnung.ToolTip = "filtern nach Kd-Nr"
       Case "Firma-Nr"
        txtSuchenRechnung.ToolTip = "filtern nach Firma-Nr"
       Case "Anrede"
        txtSuchenRechnung.ToolTip = "filtern nach Anrede"
       Case "Name"
        txtSuchenRechnung.ToolTip = "filtern nach Name"
       Case "Vorname"
        txtSuchenRechnung.ToolTip = "filtern nach Vorname"
       Case "Adr.-Typ"
        txtSuchenRechnung.ToolTip = "filtern nach Adr.-Typ"
     End Select
End

Public Sub Kunden_Rechnung_einlesen()
 'SQL SELECT
  Dim c, y, z As Integer

  If chkFilterAdressentypRechnung.Value = True Then

      'sortieren
     Select Case cbxRechnungKundenSort.Text
       Case "Kd-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY id_kunde")
       Case "Firma-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY id_firma_kunde")
       Case "Anrede"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY anrede_kunde")
       Case "Name"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY name_kunde")
       Case "Vorname"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY vorname_kunde")
       Case "Adr.-Typ"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 AND adressentyp_kunde='" & cbxAdressentypRechnungKunde.Text & "' ORDER BY adressentyp_kunde")
     End Select


    Else


      'sortieren
     Select Case cbxRechnungKundenSort.Text
       Case "Kd-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY id_kunde")
       Case "Firma-Nr"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY id_firma_kunde")
       Case "Anrede"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY anrede_kunde")
       Case "Name"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY name_kunde")
       Case "Vorname"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY vorname_kunde")
       Case "Adr.-Typ"
        rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE aktiv_kunde=-1 ORDER BY adressentyp_kunde")
     End Select

  Endif


 If rsSQLKunden.Count = 0 Then
  Message.Warning("Keine Daten 'Kunden' vorhanden!")
  chkFilterAdressentypRechnung.Value = False
  Return
 Endif


  grvKundenRechnung.Columns.Count = 6
  grvKundenRechnung.Columns[0].Text = "Kd-Nr"
  grvKundenRechnung.Columns[1].Text = "Firma"
  grvKundenRechnung.Columns[2].Text = "Anrede"
  grvKundenRechnung.Columns[3].Text = "Name"
  grvKundenRechnung.Columns[4].Text = "Vorname"
  grvKundenRechnung.Columns[5].Text = "Adr.-Typ"

  grvKundenRechnung.Rows.Count = rsSQLKunden.Count + 1 'Anzahl DS Kunden in Rechnung

  grvKundenRechnung.Columns[0].Width = 90
  grvKundenRechnung.Columns[1].Width = 200
  grvKundenRechnung.Columns[2].Width = 70
  grvKundenRechnung.Columns[3].Width = 200
  grvKundenRechnung.Columns[4].Width = 200
  grvKundenRechnung.Columns[5].Width = 100
  grvKundenRechnung.Rows[0].Height = 0 'Reihe 0 verstecken

  rsSQLKunden.MoveFirst


  For c = 1 To rsSQLKunden.Count  'Liste Kunden-Rechnung auf
    rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)
    grvKundenRechnung[c, 0].Alignment = Align.Right
    grvKundenRechnung[c, 0].Text = rsSQLKunden!id_kunde
    grvKundenRechnung[c, 1].Text = rsSQLFirmen!name_firma
    grvKundenRechnung[c, 2].Text = rsSQLKunden!anrede_kunde
    grvKundenRechnung[c, 3].Text = rsSQLKunden!name_kunde
    grvKundenRechnung[c, 4].Text = rsSQLKunden!vorname_kunde
    grvKundenRechnung[c, 5].Text = rsSQLKunden!adressentyp_kunde
    rsSQLKunden.MoveNext
  Next


  ' Tabellen Farben auf Standard setzen
  For y = 0 To grvKundenRechnung.Rows.Count - 1
  For z = 0 To grvKundenRechnung.Columns.Count - 1
    grvKundenRechnung[y, z].Background = Color.White
    grvKundenRechnung[y, z].Foreground = Color.Black
  Next
  Next


  If valRechnungsnummer.Value = 0 Then
     btn_Rechnungen(1, 0, 0, 0, 0)
     Else ' damit beim TAB umschalten die Buttons stimmen!
     btn_Rechnungen(0, 1, 1, 1, 1)
  Endif


  btnAngebot.Visible = True
  grvKundenRechnung.ToolTip = "Anzahl: " & (grvKundenRechnung.Rows.Count - 1)
  txtProjektRechnung.SetFocus
End



Public Sub grvKundenRechnung_Click()
 'Ausgewählten Datensatz markieren
  Dim y, z As Integer

  For y = 0 To grvKundenRechnung.Rows.Count - 1
  For z = 0 To grvKundenRechnung.Columns.Count - 1
    grvKundenRechnung[y, z].Background = Color.White
    grvKundenRechnung[y, z].Foreground = Color.Black
  Next
  Next

  For z = 0 To grvKundenRechnung.Columns.Count - 1
    grvKundenRechnung[grvKundenRechnung.Row, z].Background = Color.Gray
    grvKundenRechnung[grvKundenRechnung.Row, z].Foreground = Color.Blue
  Next


  'Datensatz in Formular einlesen
   If grvKundenRechnung.Row > 0 Then
    rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_kunde=" & CLong(grvKundenRechnung[grvKundenRechnung.Row, 0].Text))
    rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)


    txtProjektRechnung.Clear
    valNrFirmaRechnung.Value = rsSQLFirmen!id_firma
    valIDKundeRechnung.Value = rsSQLKunden!id_kunde
    txtFirmaKundeRechnung.Text = rsSQLFirmen!name_firma
    'wichtig! sonst kommt es im Filter zu einem Fehler!
    If chkFilterAdressentypRechnung.Value = False Then cbxAdressentypRechnungKunde.Text = rsSQLKunden!adressentyp_kunde
    txtAnredeKundeRechnung.Text = rsSQLKunden!anrede_kunde
    txtNameKundeRechnung.Text = rsSQLKunden!name_kunde
    txtVornameKundeRechnung.Text = rsSQLKunden!vorname_kunde
    txtAbteilungKundeRechnung.Text = rsSQLKunden!abteilung_kunde
    txtStrasseKundeRechnung.Text = rsSQLKunden!strasse_kunde
    txtPLZKundeRechnung.Text = rsSQLKunden!plz_kunde
    txtOrtKundeRechnung.Text = rsSQLKunden!ort_kunde
    txtEMailKundeRechnung.Text = rsSQLKunden!email_kunde
    chkRechnungOnline.Value = rsSQLKunden!email_kunde_senden
    txtIhrZeichenRechnung.Text = rsSQLKunden!ihrzeichen_kunde


    Rechnungsnummer()
    KleinFA()
    chkRechnungOnline_Click()



 'Rechnungsdaten
  If valRechnungsdatumRechnung.Value = datEmpty Then valRechnungsdatumRechnung.Value = Date(Now)
  If valZahlungszielRechnung.Value = 0 Then valZahlungszielRechnung.Value = rsSQLFirmen!zahlungsziel_firma
  If valSkontoRechnungen2.Value = 0 Then valSkontoRechnungen2.Value = rsSQLFirmen!skonto_firma
  If valSkontoTageRechnung.Value = 0 Then valSkontoTageRechnung.Value = rsSQLFirmen!skonto_tage_firma

  If valZahlungsfristRechnung.Value = datEmpty Then valZahlungsfristRechnung.Value = DateAdd(valRechnungsdatumRechnung.Value, gb.Day, valZahlungszielRechnung.Value)
  If valZahlungsfristSkonto.Value = datEmpty Then valZahlungsfristSkonto.Value = DateAdd(valRechnungsdatumRechnung.Value, gb.Day, valSkontoTageRechnung.Value)


    tabRechnung[1].Enabled = True
    tabRechnung[2].Enabled = True
    btn_Rechnungen(1, 0, 0, 0, 0)
    btnAngebot.Visible = True


    cbxRechnungFirmaNr.ReadOnly = False
      cbxRechnungFirmaNr.Text = valNrFirmaRechnung.Value
      ' macht auch einen "cbxRechnungFirmaNr_Click()"
    cbxRechnungFirmaNr.ReadOnly = True



    txtProjektRechnung.SetFocus

    ediBemerkungRechnung.Text = ediBemerkungRechnung2.Text
   Endif
End



Public Sub valRechnungsdatumRechnung_LostFocus()
 valZahlungszielRechnung_LostFocus()
 valSkontoTageRechnung_LostFocus()
End

Public Sub valZahlungszielRechnung_LostFocus()
 If valRechnungsdatumRechnung.Value <> datEmpty Then Try valZahlungsfristRechnung.Value = DateAdd(valRechnungsdatumRechnung.Value, gb.Day, valZahlungszielRechnung.Value)
End
Public Sub valSkontoTageRechnung_LostFocus()
 If valZahlungsfristSkonto.Value <> datEmpty Then Try valZahlungsfristSkonto.Value = DateAdd(valRechnungsdatumRechnung.Value, gb.Day, valSkontoTageRechnung.Value)
End




Public Sub btnRechnungNeu_Click()

   Rechnungen_einlesen()
   Felder_Kunde_Rechnung_leeren()
   Felder_Rechnungsdaten_leeren()
   Rechnungsbetrag_berechnen()
   Positionen_Rechnung_formatieren()

   grvPositionenRechnung.Clear
   grvPositionenRechnung.Rows.Count = 0


   tabRechnung.Index = 0
   txtProjektRechnung.Text = "Bitte einen Kunden aus Kundenliste auswählen"
   txtProjektRechnung.SelectAll

   grvKundenRechnung.Enabled = True

   Status_Rechnungen(1, 1, 0, 0)
   btn_Rechnungen(1, 0, 0, 0, 0)
   btnAngebot.Visible = True
   txtSuchenRechnung.Enabled = True
   txtSuchenRechnung.Clear

   tabRechnung[1].Enabled = False
   tabRechnung[2].Enabled = False

   grvWarenRechnung.Enabled = True
   grvPositionenRechnung.Enabled = True
   btnZufuegenFreiPosition.Enabled = True
   valRechnungsnummer.Value = 0
End



Public Sub btnRechnungHinzufuegen_Click()
'Neuen Datensatz "Rechnung" speichern
Dim y, z As Integer
Dim strBestellDat, strRechDat, strLieferDat, strZahlfristSkonto, strZahlfristRech, strZahleingangRech As String

Dim kategorie_position_rechnung, beschreibung_position_rechnung, waren_nr_rechnung As String
Dim menge_position_rechnung, mwst_position_rechnung, mwst_code_position_rechnung, netto_position_rechnung, netto_ges_position_rechnung As Float



  If intJahrMonat < 1001 Then ' wenn das Datum unter Jahr 2010
   Message.Error("Fehler Systemdatum --> " & strDatum & " <--" & Chr(10) & "Das Datum ist kleiner als das Jahr 2010. Es können keine Rechnungen erstellt werden!", "OK")
    Return
  Endif




  If txtProjektRechnung.Text = "" Then
    Message.Warning("Bitte einen Projektnamen angeben")
     tabRechnung.Index = 0
     txtProjektRechnung.SetFocus
      Return
  Endif

  If valIDKundeRechnung.Value = 0 Then
    Message.Warning("Bitte einen Kunden aus der Liste auswählen")
     tabRechnung.Index = 0
     txtProjektRechnung.SetFocus
      Return
  Endif

  If grvPositionenRechnung.Rows.Count = 0 Then
    Message.Warning("Bitte mind. eine Rechnungspositionen anlegen")
     tabRechnung.Index = 1
      Return
  Endif



  'Status
  If radStatusOffenRechnung.Value = True Then intStatus = 10
  If radStatusBezahltRechnung.Value = True Then intStatus = 20
  If radStatusAngebot.Value = True Then intStatus = 30
  If radStatusCancel.Value = True Then intStatus = 99



  'Datum formatieren
      strRechDat = Format$(valRechnungsdatumRechnung.Value, "yyyy-mm-dd")
      strBestellDat = Format$(valBestelldatumRechnung.Value, "yyyy-mm-dd")
      strLieferDat = Format$(valLieferdatumRechnung.Value, "yyyy-mm-dd")
      strZahlfristSkonto = Format$(valZahlungsfristSkonto.Value, "yyyy-mm-dd")
      strZahlfristRech = Format$(valZahlungsfristRechnung.Value, "yyyy-mm-dd")
      strZahleingangRech = Format$(valZahlungseingangRechnung.Value, "yyyy-mm-dd")


  rsSQLRechnung = myConn.Exec("INSERT INTO tblFirma_Rechnung (id_rechnung, projekt_rechnung, id_kunde_rechnung, id_firma_rechnung, bestelldatum_rechnung, rechnungsdatum_rechnung, lieferdatum_rechnung, zahlungsfrist_skonto_rechnung, zahlungsfrist_rechnung, zahlungseingang_rechnung, rabatt_rechnung, laufzeit_rechnung, auftraggeber_rechnung, abholer_rechnung, zahlungsart_rechnung, lieferart_rechnung, zahlungsziel_rechnung, skonto_rechnung, skonto_tage_rechnung, status_rechnung, netto_erm_rechnung, mwst_erm_rechnung, brutto_erm_skonto_rechnung, netto_voll_rechnung, mwst_voll_rechnung, brutto_voll_rechnung, netto_gesamt_rechnung, mwst_gesamt_rechnung, brutto_gesamt_rechnung, bemerkung_rechnung) " &
                   "Values(" & valRechnungsnummer.Value & ",'" & txtProjektRechnung.TEXT & "'," & valIDKundeRechnung.Value & "," & valNrFirmaRechnung.Value & ",'" &
                   strBestellDat & "','" & strRechDat & "','" & strLieferDat & "','" &
                   strZahlfristSkonto & "','" & strZahlfristRech & "','" & strZahleingangRech & "'," & spnRabattRechnung.Value & "," & spnLaufzeitRechnung.Value & ",'" &
                   txtAuftraggeberRechnung.Text & "','" & txtAbholerRechnung.Text & "','" & cbxZahlungsartRechnung.Text & "','" & cbxLieferartRechnung.Text & "'," &
                   valZahlungszielRechnung.Value & "," & valSkontoRechnungen2.Value & "," & valSkontoTageRechnung.Value & "," & intStatus & ",'" &
                   Val(txtNettoErmRechnung.Text) & "','" & Val(txtMwStErmRechnung.Text) & "','" & Val(txtBruttoErmRechnung.Text) & "','" &
                   Val(txtNettoVollRechnung.Text) & "','" & Val(txtMwStVollRechnung.Text) & "','" & Val(txtBruttoVollRechnung.Text) & "','" &
                   Val(txtNettoGesamtRechnung.Text) & "','" & Val(txtMwStGesamtRechnung.Text) & "','" & Val(txtBruttoGesamtRechnung.Text) & "','" &
                   ediBemerkungRechnung.Text & "')")

  'rsSQLRechnung (insert) ist laut Gambas zu komplex, daher hänge ich den Rest per update drann ;-)
    myConn.Exec("UPDATE tblFirma_Rechnung SET id_kunde_rechnung='" & valIDKundeRechnung.Value &
     "', bemerkungInt_rechnung='" & ediBemerkungIntRechnung.Text &
     "' WHERE id_rechnung = " & valRechnungsnummer.Value)

  If bolKleinFA = True Then
    myConn.Exec("UPDATE tblFirma_Rechnung SET id_kunde_rechnung='" & valIDKundeRechnung.Value &
     "', mwst_erm_rechnung_proz='" & 0 &
     "', mwst_voll_rechnung_proz='" & 0 &
     "' WHERE id_rechnung = " & valRechnungsnummer.Value)
   Else
    myConn.Exec("UPDATE tblFirma_Rechnung SET id_kunde_rechnung='" & valIDKundeRechnung.Value &
     "', mwst_erm_rechnung_proz='" & txtEinstMwStErm.Text &
     "', mwst_voll_rechnung_proz='" & txtEinstMwStVoll.Text &
     "' WHERE id_rechnung = " & valRechnungsnummer.Value)
  Endif



     'Positionen Rechnung speichern
     'Merker für neuen DS Rech.Pos.!
      rsSQLPOSRechnung = myConn.Exec("SELECT id_position_rechnung FROM tblPosition_Rechnung ORDER BY id_position_rechnung ASC")
      rsSQLPOSRechnung.MoveLast

        If rsSQLPOSRechnung.Count > 0 Then
          intNewRechPosIndex = rsSQLPOSRechnung!id_position_rechnung + 1 ' Merker für neuen DS!
        Else
          intNewRechPosIndex = 1
        Endif

      'GridView auslesen und in SQL schreiben
      For y = 1 To grvPositionenRechnung.Rows.Count - 1

          waren_nr_rechnung = Val(grvPositionenRechnung[y, 0].Text)
          kategorie_position_rechnung = grvPositionenRechnung[y, 1].Text
          beschreibung_position_rechnung = grvPositionenRechnung[y, 2].Text
          menge_position_rechnung = Val(grvPositionenRechnung[y, 3].Text)

          If bolKleinFA = True Then
           mwst_position_rechnung = 0
          Else
           mwst_position_rechnung = Val(grvPositionenRechnung[y, 4].Text)
          Endif

          netto_position_rechnung = Val(grvPositionenRechnung[y, 5].Text)
          netto_ges_position_rechnung = Val(grvPositionenRechnung[y, 6].Text)

          If bolKleinFA = True Then
           mwst_code_position_rechnung = 0
          Else
           mwst_code_position_rechnung = Val(grvPositionenRechnung[y, 7].Text)
          Endif

      For z = 1 To grvPositionenRechnung.Columns.Count - 1

      Next

      rsSQLPOSRechnung = myConn.Exec("INSERT INTO tblPosition_Rechnung (id_position_rechnung, nummer_id_rechnung, waren_nr_rechnung, kategorie_position_rechnung, beschreibung_position_rechnung, menge_position_rechnung, mwst_position_rechnung,  mwst_code_position_rechnung, netto_position_rechnung,  netto_ges_position_rechnung) " &
                           "Values(" & intNewRechPosIndex & "," & valRechnungsnummer.Value & ",'" & waren_nr_rechnung & "','" & kategorie_position_rechnung & "','" & beschreibung_position_rechnung & "','" & menge_position_rechnung & "','" & mwst_position_rechnung & "','" & mwst_code_position_rechnung & "','" & netto_position_rechnung & "','" & netto_ges_position_rechnung & "')")

      intNewRechPosIndex = intNewRechPosIndex + 1
      Next




   'Waren abziehen
   If radStatusAngebot.Value = False Then Waren_Rechnung_abziehen()

   grvPositionenRechnung.Columns.Count = 0
   grvPositionenRechnung.Rows.Count = 0

   Felder_Kunde_Rechnung_leeren()
   Waren_Rechnung_einlesen()
   Rechnungen_einlesen()
   Rechnungsbetrag_berechnen()
   tabRechnung.Index = 0
   txtSuchenRechnung.Clear

   grvPositionenRechnung.Clear
   grvPositionenRechnung.Rows.Count = 0


     'Info: Dabei wird eine neue RechnNr erzeugt, darum erst am Ende! (Rechnungen_einlesen)
     If radStatusOffenRechnung.Value = True Then radRechnungOffen.Value = True
     If radStatusBezahltRechnung.Value = True Then radRechnungAlleBez.Value = True
     If radStatusAngebot.Value = True Then radRechnungAngebot.Value = True

     valRechnungsnummer.Value = 0
     radStatusOffenRechnung.Value = True
End




Public Sub txtProjektRechnung_KeyPress()
  If valIDKundeRechnung.Value = 0 Then Message.Warning("Bitte erst einen Kunden auswählen")
End



Public Sub btnAngebot_Click()
  If valNrFirmaRechnung.Value < 1 Then
    btnAngebot.Value = False
    Return
  Endif

    If btnAngebot.Value = False Then
      valRechnungsnummer.Value = intNewRechNrIndex
      radStatusOffenRechnung.Value = True
      btnAngebot.Text = "als Rechnung"
    Else
      'Angebotsnummer erzeugen: fld.Nummer
      rsSQLAngebotNr = myConn.Exec("SELECT * FROM tblFirma_Rechnung WHERE status_rechnung = 30 ORDER BY id_rechnung DESC")
      rsSQLAngebotNr.MoveFirst

           If rsSQLAngebotNr.Count > 0 Then
             valRechnungsnummer.Value = rsSQLAngebotNr!id_rechnung + 1
           Else
             valRechnungsnummer.Value = 1
           Endif

      radStatusAngebot.Value = True
      btnAngebot.Text = "als Angebot"
  Endif

End




Public Sub btnKundendatenAendern_Click()
  Dim z, id As Integer
  If txtNameKundeRechnung.Text = "" Then Return

  id = valIDKundeRechnung.Value

  tabPanel1.Index = 0
  tabKunden.Index = 1

  chkFilterFirmaKunde.Value = True

  rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_kunde=" & id)
  rsSQLFirmen = myConn.Exec("SELECT id_firma, name_firma FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)

  grvKunden.Rows.Count = 2 ' Zeile 1 ist ja versteckt ;-)


  grvKunden[1, 0].Alignment = Align.Right
  grvKunden[1, 0].Text = Format$(id, "0000")
  grvKunden[1, 1].Text = rsSQLFirmen!name_firma
  grvKunden[1, 2].Text = rsSQLKunden!anrede_kunde
  grvKunden[1, 3].Text = rsSQLKunden!name_kunde
  grvKunden[1, 4].Text = rsSQLKunden!vorname_kunde
  grvKunden[1, 5].Text = rsSQLKunden!adressentyp_kunde


    valKundenNr.Value = id
    cbxFirmaKunde.Text = rsSQLFirmen!name_firma
    cbxKundeAdressentyp.Text = rsSQLKunden!adressentyp_kunde
    cbxKundeAnrede.Text = rsSQLKunden!anrede_kunde
    txtKundeName.Text = rsSQLKunden!name_kunde
    txtKundeVorname.Text = rsSQLKunden!vorname_kunde
    txtKundeAbteilung.Text = rsSQLKunden!abteilung_kunde
    txtKundeStrasse.Text = rsSQLKunden!strasse_kunde
    txtKundePLZ.Text = rsSQLKunden!plz_kunde
    txtKundeOrt.Text = rsSQLKunden!ort_kunde
    txtKundeTelefon.Text = rsSQLKunden!telefon_kunde
    txtFaxKunde.Text = rsSQLKunden!fax_kunde
    txtKundeEMail.Text = rsSQLKunden!email_kunde
    chkKundeEMailSenden.Value = rsSQLKunden!email_kunde_senden
    chkKundeAktiv.Value = rsSQLKunden!aktiv_kunde
    txtKundeIhrZeichen.Text = rsSQLKunden!ihrzeichen_kunde
    txtKundeBank.Text = rsSQLKunden!bank_kunde
    txtKundeBemerkung.Text = rsSQLKunden!bemerkung_kunde



  ' Zeile markieren
  For z = 0 To grvKunden.Columns.Count - 1
    grvKunden[1, z].Background = Color.Gray
    grvKunden[1, z].Foreground = Color.Blue
  Next

  btn_Kunden(0, 0, 0, 1, 0)
  txtKundeName.SetFocus
End



' --------------------------------------------------------------------------------


Public Sub cbxRechnungWarenSort_Click()
  Waren_Rechnung_einlesen()
End

Public Sub cbxWNBereichRechnung_Click()
  Waren_Rechnung_einlesen()
End

Public Sub chkBereichFilterRechnung_Click()
  cbxRechnungBereich_einlesen()
  Waren_Rechnung_einlesen()
End

Public Sub cbxWNLieferantRechnung_Click()
 cbxRechnungBereich_einlesen()
 Waren_Rechnung_einlesen()
End

Public Sub chkLieferantFilterRechnung_Click()
 cbxRechnungBereich_einlesen()
 Waren_Rechnung_einlesen()
End




Public Sub grvWarenRechnung_Click()

 'Ausgewählten Datensatz markieren
  Dim y, z As Integer

  For y = 0 To grvWarenRechnung.Rows.Count - 1
  For z = 0 To grvWarenRechnung.Columns.Count - 1
    grvWarenRechnung[y, z].Background = Color.White
    grvWarenRechnung[y, z].Foreground = Color.Black
  Next
  Next

  For z = 0 To grvWarenRechnung.Columns.Count - 1
    grvWarenRechnung[grvWarenRechnung.Row, z].Background = Color.Gray
    grvWarenRechnung[grvWarenRechnung.Row, z].Foreground = Color.Blue
  Next


 txtMengePosition.SetFocus
 txtMengePosition.SelectAll
End



Public Sub grvWarenRechnung_DblClick()
  Dim c As Integer
  Dim mwst_pos As Float
  Dim i, wi, ws As Float
  Dim a, b As Float

  If grvWarenRechnung.Enabled = False Or grvWarenRechnung.Row = 0 Then Return

  rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE id_waren= '" & Val(grvWarenRechnung[grvWarenRechnung.Row, 0].Text) & "' ORDER BY bereich_waren")

  For c = 1 To grvPositionenRechnung.Rows.Count - 1
  If Val(grvPositionenRechnung[c, 0].Text) = rsSQLWaren!id_waren Then
  If Message.Warning("Dieser Artikel ist bereits in der Rechnung enthalten!", "Verwerfen", "Zufügen") = 2 Then

    a = Val(grvPositionenRechnung[c, 3].Text)
    b = Val(txtMengePosition.Text)
    grvPositionenRechnung[c, 3].Text = Format$(a + b, "0.0")

  If bolKleinFA = False Then
   grvPositionenRechnung[c, 6].Text = Format$(rsSQLWaren!preis_vk_netto_waren * Val(grvPositionenRechnung[c, 3].Text), "0.00")
    Else
   grvPositionenRechnung[c, 6].Text = Format$(rsSQLWaren!preis_vk_brutto_waren * Val(grvPositionenRechnung[c, 3].Text), "0.00")
  Endif

    Rechnungsbetrag_berechnen()


      'Waren abziehen
      If radStatusAngebot.Value = False And btnRechnungAendern.Enabled = True Then
          i = Val(grvPositionenRechnung[c, 0].Text) ' ID

          'Warenbestand ist
          rsSQLWaren = myConn.Exec("SELECT bestand_waren, nichtlager_waren FROM tblWaren WHERE id_waren=" & i)
          wi = rsSQLWaren!bestand_waren

          'Warenbestand soll
          ws = wi - Val(txtMengePosition.Text)

          'Abzug Warenbestand wenn Lagerware = true (non-stockable items werden nicht abgezogen ;-)
          If rsSQLWaren!nichtlager_waren = False Then myConn.Exec("UPDATE tblWaren SET bestand_waren=" & ws & " WHERE id_waren=" & i)



          Waren_Rechnung_einlesen()
          Waren_einlesen()

          If btnRechnungHinzufuegen.Enabled = False Then bolMsgRechSave = False
           btnRechnungAendern_Click() 'Save
          bolMsgRechSave = True

      Endif

  txtMengePosition.SetFocus
  Return
  Else
  Return
  Endif
  Endif
  Next


  ' MwSt
  If rsSQLWaren!mwst_waren_code = 1 Then mwst_pos = Val(txtEinstMwStErm.Text)
  If rsSQLWaren!mwst_waren_code = 2 Then mwst_pos = Val(txtEinstMwStVoll.Text)


  Positionen_Rechnung_formatieren()
  grvPositionenRechnung.Rows.Count = grvPositionenRechnung.Rows.Count + 1
  c = grvPositionenRechnung.Rows.Count - 1

  grvPositionenRechnung[c, 0].Text = Format$(rsSQLWaren!id_waren, "00000")
  grvPositionenRechnung[c, 0].Alignment = Align.Right
  grvPositionenRechnung[c, 1].Text = rsSQLWaren!kategorie_waren
  grvPositionenRechnung[c, 2].Text = rsSQLWaren!beschreibung_waren
  grvPositionenRechnung[c, 3].Text = Format$(Val(txtMengePosition.Text), "0.0")
  grvPositionenRechnung[c, 3].Alignment = Align.Right



  If bolKleinFA = False Then
   grvPositionenRechnung[c, 4].Text = Format$(mwst_pos, "0.0") 'MwSt
   grvPositionenRechnung[c, 5].Text = Format$(rsSQLWaren!preis_vk_netto_waren, "0.00")
    Else
   grvPositionenRechnung[c, 4].Text = 0 'MwSt
   grvPositionenRechnung[c, 5].Text = Format$(rsSQLWaren!preis_vk_brutto_waren, "0.00")
  Endif
  grvPositionenRechnung[c, 4].Alignment = Align.Right
  grvPositionenRechnung[c, 5].Alignment = Align.Right

  If bolKleinFA = False Then
   grvPositionenRechnung[c, 6].Text = Format$(rsSQLWaren!preis_vk_netto_waren * Val(txtMengePosition.Text), "0.00")
    Else
   grvPositionenRechnung[c, 6].Text = Format$(rsSQLWaren!preis_vk_brutto_waren * Val(txtMengePosition.Text), "0.00")
  Endif

  grvPositionenRechnung[c, 6].Alignment = Align.Right
  grvPositionenRechnung[c, 7].Text = rsSQLWaren!mwst_waren_code 'MwSt Code



      'Waren abziehen, nur wenn Rechnung gespeichert ist und Waren geändert werden
      If radStatusAngebot.Value = False And btnRechnungAendern.Enabled = True Then
          i = Val(grvPositionenRechnung[c, 0].Text) ' ID

          'Warenbestand ist
          rsSQLWaren = myConn.Exec("SELECT bestand_waren, nichtlager_waren FROM tblWaren WHERE id_waren=" & i)
          wi = rsSQLWaren!bestand_waren

          'Warenbestand soll
          ws = wi - Val(txtMengePosition.Text)

          'Abzug Warenbestand wenn Lagerware = true (non-stockable items werden nicht abgezogen ;-)
          If rsSQLWaren!nichtlager_waren = False Then myConn.Exec("UPDATE tblWaren SET bestand_waren=" & ws & " WHERE id_waren=" & i)

          Waren_Rechnung_einlesen()
          Waren_einlesen()

          If btnRechnungHinzufuegen.Enabled = False Then bolMsgRechSave = False
           btnRechnungAendern_Click() 'Save
          bolMsgRechSave = True
      Endif


  Rechnungsbetrag_berechnen()

  txtMengePosition.Text = Format$("1", "0.0")
  grvPositionenRechnung.ToolTip = "Anzahl: " & (grvPositionenRechnung.Rows.Count - 1)


End




Public Sub btnNettoInBruttoFreiWarenRechnung_Click()
 Dim mwst As Float

 Try mwst = Val(cbxMwStFreiWarenRechnung.Text)
 If mwst = Null Then Return

 If txtNettopreisFreiWarenRechnung.Text = Null Then Return
 txtBruttopreisFreiWarenRechnung.Text = Format$(Round(Val(txtNettopreisFreiWarenRechnung.Text) + Val(txtNettopreisFreiWarenRechnung.Text) * mwst / 100, -2), "0.00")
End

Public Sub btnBruttoInNettoFreiWarenRechnung_Click()
 Dim mwst As Float

 Try mwst = Val(cbxMwStFreiWarenRechnung.Text)
 If mwst = Null Then Return

 If txtBruttopreisFreiWarenRechnung.Text = Null Then Return
 txtNettopreisFreiWarenRechnung.Text = Format$(Round(Val(txtBruttopreisFreiWarenRechnung.Text) / (mwst + 100) * 100, -2), "0.00")

End




Public Sub tabRechnung_Click()

 ' Angebot nur bei neuen Rechnungen möglich. Cancel nur bei bestehenden Rechnungen möglich.
  If tabRechnung.Index = 2 Then
    If btnRechnungHinzufuegen.Enabled = True Then

          If btnAngebot.Value = True Then ' wenn Angebot bei neuen DS
            Status_Rechnungen(0, 0, 0, 0)
          Else
            Status_Rechnungen(1, 1, 0, 0)
          Endif

      Else

          If radStatusAngebot.Value = True Then
            Status_Rechnungen(0, 0, 0, 0)
          Else
            Status_Rechnungen(1, 1, 0, 1)
         Endif

    Endif
  Endif

End



Public Sub btnZufuegenFreiPosition_Click()
'Produkte hinzufügen, die nicht in der Warenliste enthalten sind
  Dim c, mwst_pos As Integer

  If txtMengeFreiWarenRechnung.Text And txtKategorieFreiWaren.Text And txtArtikelFreiWaren.Text And txtNettopreisFreiWarenRechnung.Text And cbxMwStFreiWarenRechnung.Text And txtBruttopreisFreiWarenRechnung.Text Then

  ' MwSt
  If cbxMwStFreiWarenRechnung.Text = Val(txtEinstMwStErm.Text) Then mwst_pos = 1
  If cbxMwStFreiWarenRechnung.Text = Val(txtEinstMwStVoll.Text) Then mwst_pos = 2


  Positionen_Rechnung_formatieren()
  grvPositionenRechnung.Rows.Count = grvPositionenRechnung.Rows.Count + 1
  c = grvPositionenRechnung.Rows.Count - 1


  grvPositionenRechnung[c, 0].Text = "00000"
  grvPositionenRechnung[c, 0].Alignment = Align.Right
  grvPositionenRechnung[c, 1].Text = txtKategorieFreiWaren.Text
  grvPositionenRechnung[c, 2].Text = txtArtikelFreiWaren.Text
  grvPositionenRechnung[c, 3].Text = Format$(Val(txtMengeFreiWarenRechnung.Text), "0.0")
  grvPositionenRechnung[c, 3].Alignment = Align.Right

  If bolKleinFA = False Then
   grvPositionenRechnung[c, 4].Text = Format$(Val(cbxMwStFreiWarenRechnung.Text), "0.0") ' MwSt
   grvPositionenRechnung[c, 6].Text = Format$(Val(txtMengeFreiWarenRechnung.Text) * Val(txtNettopreisFreiWarenRechnung.Text), "0.00")
   grvPositionenRechnung[c, 5].Text = Format$(Val(txtNettopreisFreiWarenRechnung.Text), "0.00")
    Else
   grvPositionenRechnung[c, 4].Text = 0 ' MwSt
   grvPositionenRechnung[c, 6].Text = Format$(Val(txtMengeFreiWarenRechnung.Text) * Val(txtBruttopreisFreiWarenRechnung.Text), "0.00")
   grvPositionenRechnung[c, 5].Text = Format$(Val(txtBruttopreisFreiWarenRechnung.Text), "0.00")
  Endif

  grvPositionenRechnung[c, 4].Alignment = Align.Right
  grvPositionenRechnung[c, 5].Alignment = Align.Right
  grvPositionenRechnung[c, 6].Alignment = Align.Right
  grvPositionenRechnung[c, 7].Text = mwst_pos 'MwSt Code


  txtMengeFreiWarenRechnung.Text = 1
  txtArtikelFreiWaren.Clear
  txtNettopreisFreiWarenRechnung.Clear
  txtBruttopreisFreiWarenRechnung.Clear

  grvPositionenRechnung.ToolTip = "Anzahl: " & (grvPositionenRechnung.Rows.Count - 1)
  Rechnungsbetrag_berechnen()

  Else

  Message.Warning("Bitte geben Sie erst alle Daten ein")
   If txtBruttopreisFreiWarenRechnung.Text = "" Then txtBruttopreisFreiWarenRechnung.SetFocus
    If cbxMwStFreiWarenRechnung.Text = "" Then cbxMwStFreiWarenRechnung.SetFocus
     If txtNettopreisFreiWarenRechnung.Text = "" Then txtNettopreisFreiWarenRechnung.SetFocus
      If txtArtikelFreiWaren.Text = "" Then txtArtikelFreiWaren.SetFocus
       If txtKategorieFreiWaren.Text = "" Then txtKategorieFreiWaren.SetFocus
Endif
End




Public Sub grvPositionenRechnung_Click()
 'Ausgewählten Datensatz markieren
  Dim y, z As Integer

  For y = 0 To grvPositionenRechnung.Rows.Count - 1
  For z = 0 To grvPositionenRechnung.Columns.Count - 1
    grvPositionenRechnung[y, z].Background = Color.White
    grvPositionenRechnung[y, z].Foreground = Color.Black
  Next
  Next

  For z = 0 To grvPositionenRechnung.Columns.Count - 1
    grvPositionenRechnung[grvPositionenRechnung.Row, z].Background = Color.Gray
    grvPositionenRechnung[grvPositionenRechnung.Row, z].Foreground = Color.Blue
  Next

  txtMengeNeuPosition.Enabled = True
  btnLoeschenPosition.Enabled = True
  txtMengeNeuPosition.Text = Format$(Val(grvPositionenRechnung[grvPositionenRechnung.Row, 3].Text), "0.0")

  txtMengeNeuPosition.SetFocus
  txtMengeNeuPosition.SelectAll
  floRechPosMenge = Val(txtMengeNeuPosition.Text)
End



Public Sub txtMengeNeuPosition_Change()
  'Menge der ausgewählten Position nachträglich ändern
  Dim a As Float
  If txtMengeNeuPosition.Text = Null Then Return
  If grvWarenRechnung.Enabled = False Then Return
  If grvPositionenRechnung[grvPositionenRechnung.Row, 3].Text = txtMengeNeuPosition.Text Then Return

    a = Val(txtMengeNeuPosition.Text)
    grvPositionenRechnung[grvPositionenRechnung.Row, 3].Text = Format$(a, "0.0")
    grvPositionenRechnung[grvPositionenRechnung.Row, 6].Text = Format$(Val(grvPositionenRechnung[grvPositionenRechnung.Row, 3].Text) * Val(grvPositionenRechnung[grvPositionenRechnung.Row, 5].Text), "0.00")

    Rechnungsbetrag_berechnen()

  If radStatusAngebot.Value = False Then
      If btnRechnungAendern.Enabled = True Then
        Waren_Rechnung_abziehen_Zeile()

        bolMsgRechSave = False ' Savemessage unterdrücken
        btnRechnungAendern_Click() 'Save
        bolMsgRechSave = True

      Endif
    floRechPosMenge = Val(txtMengeNeuPosition.Text)
  Endif
    txtMengeNeuPosition.SetFocus
End



Public Sub btnLoeschenPosition_Click()
'Markierten Datensatz löschen
  Dim tmp_pos As New String[]
  Dim v, w, x, y, z As Integer
  If grvWarenRechnung.Enabled = False Then Return

  z = 0

  If grvPositionenRechnung.Rows.Count = 2 Then
    Message.Warning("Löschen erst ab 2 Positionen möglich!")
    Return
  Endif


  If Message.Warning("Soll die ausgewählte Position wirklich gelöscht werden?", "Ja", "Nein") = 1 Then


    'Warenbestand anpassen
    If radStatusAngebot.Value = False And btnRechnungAendern.Enabled = True Then
     txtMengeNeuPosition.Text = 0
     Waren_Rechnung_abziehen_Zeile()
    Endif



  For y = 1 To grvPositionenRechnung.Rows.Count - 1
  If (y = grvPositionenRechnung.Row) = False Then
  For x = 0 To grvPositionenRechnung.Columns.Count - 1
  tmp_pos.Add(grvPositionenRechnung[y, x].Text)
  Next
  Endif
  Next

  v = grvPositionenRechnung.Rows.Count - 2
  w = grvPositionenRechnung.Columns.Count - 1
  grvPositionenRechnung.Clear
  grvPositionenRechnung.Rows.Count = v + 1
  For y = 1 To v
  For x = 0 To w
  grvPositionenRechnung[y, x].Text = tmp_pos[z]
  If x = 0 Or x = 3 Or x = 4 Or x = 5 Or x = 6 Then ' rechts ausrichten
  grvPositionenRechnung[y, x].Alignment = Align.Right
  Endif
  Inc z
  Next
  Next


  Rechnungsbetrag_berechnen()
  Endif

   txtMengeNeuPosition.Enabled = False
   btnLoeschenPosition.Enabled = False
   grvPositionenRechnung.ToolTip = "Anzahl: " & (grvPositionenRechnung.Rows.Count - 1)

End




Public Sub spnLaufzeitRechnung_Change()
  If valLieferdatumRechnung.Value = datEmpty And spnLaufzeitRechnung.Value > 0 Then valLieferdatumRechnung.Value = Date(Now)
End



Public Sub spnRabattRechnung_Change()
  Rechnungsbetrag_berechnen()
End


Public Sub grvRechnungen_Click()
  Dim y, z, r, id, c As Integer

  If grvRechnungen.Row = 0 Then Return

    txtSuchenRechnung.Clear
    txtSuchenRechnung.Enabled = False

    txtMengeNeuPosition.Clear


 'Ausgewählten Datensatz markieren
  For y = 0 To grvRechnungen.Rows.Count - 1
  For z = 0 To grvRechnungen.Columns.Count - 1
    grvRechnungen[y, z].Background = Color.White
    grvRechnungen[y, z].Foreground = Color.Black
  Next
  Next
  For z = 0 To grvRechnungen.Columns.Count - 1
    grvRechnungen[grvRechnungen.Row, z].Background = Color.Gray
    grvRechnungen[grvRechnungen.Row, z].Foreground = Color.Blue
  Next


    'Ausgewählte Rechnungsdaten in DB suchen
    rsSQLRechnung = myConn.Exec("SELECT * FROM tblFirma_Rechnung WHERE id_rechnung=" & CLong(grvRechnungen[grvRechnungen.Row, 0].Text))
    valRechnungsnummer.Value = rsSQLRechnung!id_rechnung
    id = rsSQLRechnung!id_kunde_rechnung



 'Datensatz KundenID markieren (r)
  For y = 0 To grvKundenRechnung.Rows.Count - 1
  For z = 0 To grvKundenRechnung.Columns.Count - 1
    grvKundenRechnung[y, z].Background = Color.White
    grvKundenRechnung[y, z].Foreground = Color.Black
    If grvKundenRechnung[y, 0].Text = id Then r = y
  Next
  Next
  For z = 0 To grvKundenRechnung.Columns.Count - 1
    grvKundenRechnung[r, z].Background = Color.Gray
    grvKundenRechnung[r, z].Foreground = Color.Blue
  Next


    'Kundendaten einlesen
    rsSQLKunden = myConn.Exec("SELECT * FROM tblKunden WHERE id_kunde=" & id)
    rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen WHERE id_firma=" & rsSQLKunden!id_firma_kunde)

    txtProjektRechnung.Text = rsSQLRechnung!projekt_rechnung
    valNrFirmaRechnung.Value = rsSQLFirmen!id_firma
    valIDKundeRechnung.Value = rsSQLKunden!id_kunde
    txtFirmaKundeRechnung.Text = rsSQLFirmen!name_firma
    cbxAdressentypRechnungKunde.Text = rsSQLKunden!adressentyp_kunde
    txtAnredeKundeRechnung.Text = rsSQLKunden!anrede_kunde
    txtNameKundeRechnung.Text = rsSQLKunden!name_kunde
    txtVornameKundeRechnung.Text = rsSQLKunden!vorname_kunde
    txtAbteilungKundeRechnung.Text = rsSQLKunden!abteilung_kunde
    txtStrasseKundeRechnung.Text = rsSQLKunden!strasse_kunde
    txtPLZKundeRechnung.Text = rsSQLKunden!plz_kunde
    txtOrtKundeRechnung.Text = rsSQLKunden!ort_kunde
    txtEMailKundeRechnung.Text = rsSQLKunden!email_kunde
    chkRechnungOnline.Value = rsSQLKunden!email_kunde_senden
    txtIhrZeichenRechnung.Text = rsSQLKunden!ihrzeichen_kunde

    KleinFA()


    'Rechnungsdaten einlesen (Preise werden aus den Positionen berechnet)
     valBestelldatumRechnung.Value = rsSQLRechnung!bestelldatum_rechnung
       If rsSQLRechnung!bestelldatum_rechnung = Null Then valBestelldatumRechnung.Value = datEmpty
     valRechnungsdatumRechnung.Value = rsSQLRechnung!rechnungsdatum_rechnung
       If rsSQLRechnung!rechnungsdatum_rechnung = Null Then valRechnungsdatumRechnung.Value = datEmpty
     valLieferdatumRechnung.Value = rsSQLRechnung!lieferdatum_rechnung
       If rsSQLRechnung!lieferdatum_rechnung = Null Then valLieferdatumRechnung.Value = datEmpty
     txtAuftraggeberRechnung.Text = rsSQLRechnung!auftraggeber_rechnung
     txtAbholerRechnung.Text = rsSQLRechnung!abholer_rechnung
     cbxZahlungsartRechnung.Text = rsSQLRechnung!zahlungsart_rechnung
     cbxLieferartRechnung.Text = rsSQLRechnung!lieferart_rechnung
     valZahlungsfristSkonto.Value = rsSQLRechnung!zahlungsfrist_skonto_rechnung
     valZahlungsfristRechnung.Value = rsSQLRechnung!zahlungsfrist_rechnung
     valZahlungseingangRechnung.Value = rsSQLRechnung!zahlungseingang_rechnung
       If rsSQLRechnung!zahlungseingang_rechnung = Null Then valZahlungseingangRechnung.Value = datEmpty
     spnLaufzeitRechnung.Value = rsSQLRechnung!laufzeit_rechnung
     valZahlungszielRechnung.Value = rsSQLRechnung!zahlungsziel_rechnung
     valSkontoRechnungen2.Value = rsSQLRechnung!skonto_rechnung
     valSkontoTageRechnung.Value = rsSQLRechnung!skonto_tage_rechnung
     ediBemerkungRechnung.Text = rsSQLRechnung!bemerkung_rechnung
     ediBemerkungIntRechnung.Text = rsSQLRechnung!bemerkungInt_rechnung
     'Status
      If rsSQLRechnung!status_rechnung = 10 Then radStatusOffenRechnung.Value = True
      If rsSQLRechnung!status_rechnung = 20 Then radStatusBezahltRechnung.Value = True
      If rsSQLRechnung!status_rechnung = 30 Then radStatusAngebot.Value = True
      If rsSQLRechnung!status_rechnung = 99 Then radStatusCancel.Value = True

     'muss ans Ende, weil spnRabattRechnung.Value als Change-Ereignis: Rechnungsbetrag_berechnen()
     spnRabattRechnung.Value = rsSQLRechnung!rabatt_rechnung



  'Rechnungspositionen einlesen
   rsSQLPOSRechnung = myConn.Exec("SELECT * FROM tblPosition_Rechnung WHERE nummer_id_rechnung=" & valRechnungsnummer.Value & " ORDER BY id_position_rechnung")
   rsSQLPOSRechnung.MoveFirst

   Positionen_Rechnung_formatieren()

   grvPositionenRechnung.Rows.Count = rsSQLPOSRechnung.Count + 1 'Anzahl DS Position

   For c = 1 To rsSQLPOSRechnung.Count 'Anzahl DS SQL-Position
   grvPositionenRechnung[c, 0].Text = Format$(rsSQLPOSRechnung!waren_nr_rechnung, "00000")
   grvPositionenRechnung[c, 0].Alignment = Align.Right
   grvPositionenRechnung[c, 1].Text = rsSQLPOSRechnung!kategorie_position_rechnung
   grvPositionenRechnung[c, 2].Text = rsSQLPOSRechnung!beschreibung_position_rechnung
   grvPositionenRechnung[c, 3].Text = Format$(rsSQLPOSRechnung!menge_position_rechnung, "0.0")
   grvPositionenRechnung[c, 3].Alignment = Align.Right
   grvPositionenRechnung[c, 4].Text = Format$(rsSQLPOSRechnung!mwst_position_rechnung, "0.0")
   grvPositionenRechnung[c, 4].Alignment = Align.Right
   grvPositionenRechnung[c, 5].Text = Format$(rsSQLPOSRechnung!netto_position_rechnung, "0.00")
   grvPositionenRechnung[c, 5].Alignment = Align.Right
   grvPositionenRechnung[c, 6].Text = Format$(rsSQLPOSRechnung!netto_ges_position_rechnung, "0.00")
   grvPositionenRechnung[c, 6].Alignment = Align.Right
   grvPositionenRechnung[c, 7].Text = rsSQLPOSRechnung!mwst_code_position_rechnung

   rsSQLPOSRechnung.MoveNext
   Next



   Rechnungsbetrag_berechnen()
   txtMengePosition.Text = Format$("1", "0.0")
   grvPositionenRechnung.ToolTip = "Anzahl: " & (grvPositionenRechnung.Rows.Count - 1)

    grvKundenRechnung.Enabled = False

    tabRechnung[1].Enabled = True
    tabRechnung[2].Enabled = True


    If radStatusAngebot.Value = True Then
    Status_Rechnungen(0, 0, 0, 0)
     Else
    Status_Rechnungen(1, 1, 0, 1)
    Endif
    btn_Rechnungen(0, 1, 1, 1, 1)
    btnAngebot.Visible = False




   'wenn Rechnung Bezahlt oder Cancel, dann ist keine Warenverändung mehr möglich
    If radStatusBezahltRechnung.Value = True Or radStatusCancel.Value = True Then
      grvWarenRechnung.Enabled = False
      grvPositionenRechnung.Enabled = False
      btnZufuegenFreiPosition.Enabled = False
    Else
      grvWarenRechnung.Enabled = True
      grvPositionenRechnung.Enabled = True
      btnZufuegenFreiPosition.Enabled = True
    Endif

End




Public Sub btnRechnungAendern_Click()
Dim y, z As Integer
Dim strBestellDat, strRechDat, strLieferDat, strZahlfristSkonto, strZahlfristRech, strZahleingangRech As String
Dim kategorie_position_rechnung, beschreibung_position_rechnung, waren_nr_rechnung As String
Dim menge_position_rechnung, mwst_position_rechnung, mwst_code_position_rechnung, netto_position_rechnung, netto_ges_position_rechnung As Float


  'Status
  If radStatusOffenRechnung.Value = True Then intStatus = 10
  If radStatusBezahltRechnung.Value = True Then intStatus = 20
  If radStatusAngebot.Value = True Then intStatus = 30
  If radStatusCancel.Value = True Then intStatus = 99

  'Datum formatieren
  strRechDat = Format$(valRechnungsdatumRechnung.Value, "yyyy-mm-dd")
   strBestellDat = Format$(valBestelldatumRechnung.Value, "yyyy-mm-dd")
    strLieferDat = Format$(valLieferdatumRechnung.Value, "yyyy-mm-dd")
     strZahlfristSkonto = Format$(valZahlungsfristSkonto.Value, "yyyy-mm-dd")
     strZahlfristRech = Format$(valZahlungsfristRechnung.Value, "yyyy-mm-dd")
      strZahleingangRech = Format$(valZahlungseingangRechnung.Value, "yyyy-mm-dd")



  myConn.Exec("UPDATE tblFirma_Rechnung SET id_kunde_rechnung='" & valIDKundeRechnung.Value &
   "', id_firma_rechnung='" & valNrFirmaRechnung.Value &
   "', projekt_rechnung='" & txtProjektRechnung.Text &
   "', bestelldatum_rechnung='" & strBestellDat &
   "', rechnungsdatum_rechnung='" & strRechDat &
   "', lieferdatum_rechnung='" & strLieferDat &
   "', auftraggeber_rechnung='" & txtAuftraggeberRechnung.Text &
   "', abholer_rechnung='" & txtAbholerRechnung.Text &
   "', zahlungsart_rechnung='" & cbxZahlungsartRechnung.Text &
   "', lieferart_rechnung='" & cbxLieferartRechnung.Text &
   "', zahlungsfrist_skonto_rechnung='" & strZahlfristSkonto &
   "', zahlungsfrist_rechnung='" & strZahlfristRech &
   "', zahlungseingang_rechnung='" & strZahleingangRech &
   "', laufzeit_rechnung='" & spnLaufzeitRechnung.Value &
   "', rabatt_rechnung='" & spnRabattRechnung.Value &
   "', zahlungsziel_rechnung='" & valZahlungszielRechnung.Value &
   "', skonto_rechnung='" & valSkontoRechnungen2.Value &
   "', skonto_tage_rechnung='" & valSkontoRechnungen2.Value &
   "', status_rechnung='" & intStatus &
   "', netto_erm_rechnung='" & Val(txtNettoErmRechnung.Text) &
   "', mwst_erm_rechnung='" & Val(txtMwStErmRechnung.Text) &
   "', brutto_erm_skonto_rechnung='" & Val(txtBruttoErmRechnung.Text) &
   "', netto_voll_rechnung='" & Val(txtNettoVollRechnung.Text) &
   "', mwst_voll_rechnung='" & Val(txtMwStVollRechnung.Text) &
   "', brutto_voll_rechnung='" & Val(txtBruttoVollRechnung.Text) &
   "', netto_gesamt_rechnung='" & Val(txtNettoGesamtRechnung.Text) &
   "', mwst_gesamt_rechnung='" & Val(txtMwStGesamtRechnung.Text) &
   "', brutto_gesamt_rechnung='" & Val(txtBruttoGesamtRechnung.Text) &
   "', bemerkung_rechnung='" & ediBemerkungRechnung.Text &
   "', bemerkungInt_rechnung='" & ediBemerkungIntRechnung.Text &
   "' WHERE id_rechnung = " & valRechnungsnummer.Value)



   'Positionen Rechnung löschen und dann neu speichern
   rsSQLRechnung = myConn.Exec("DELETE FROM tblPosition_Rechnung WHERE nummer_id_rechnung=" & valRechnungsnummer.Value)


     'Positionen Rechnung speichern
     'Merker für neuen DS Rech.Pos.!
      rsSQLPOSRechnung = myConn.Exec("SELECT id_position_rechnung FROM tblPosition_Rechnung ORDER BY id_position_rechnung ASC")
      rsSQLPOSRechnung.MoveLast

        If rsSQLPOSRechnung.Count > 0 Then
          intNewRechPosIndex = rsSQLPOSRechnung!id_position_rechnung + 1 ' Merker für neuen DS!
        Else
          intNewRechPosIndex = 1
        Endif

      'GridView auslesen und in SQL schreiben
      For y = 1 To grvPositionenRechnung.Rows.Count - 1

          waren_nr_rechnung = Val(grvPositionenRechnung[y, 0].Text)
          kategorie_position_rechnung = grvPositionenRechnung[y, 1].Text
          beschreibung_position_rechnung = grvPositionenRechnung[y, 2].Text
          menge_position_rechnung = Val(grvPositionenRechnung[y, 3].Text)
          mwst_position_rechnung = Round(Val(grvPositionenRechnung[y, 4].Text), -2)
          netto_position_rechnung = Round(Val(grvPositionenRechnung[y, 5].Text), -2)
          netto_ges_position_rechnung = Round(Val(grvPositionenRechnung[y, 6].Text), -2)
          mwst_code_position_rechnung = Val(grvPositionenRechnung[y, 7].Text)


      For z = 1 To grvPositionenRechnung.Columns.Count - 1

      Next

      rsSQLPOSRechnung = myConn.Exec("INSERT INTO tblPosition_Rechnung (id_position_rechnung, nummer_id_rechnung, waren_nr_rechnung, kategorie_position_rechnung, beschreibung_position_rechnung, menge_position_rechnung, mwst_position_rechnung, mwst_code_position_rechnung, netto_position_rechnung, netto_ges_position_rechnung) " &
                           "Values(" & intNewRechPosIndex & "," & valRechnungsnummer.Value & ",'" & waren_nr_rechnung & "','" & kategorie_position_rechnung & "','" & beschreibung_position_rechnung & "','" & menge_position_rechnung & "','" & mwst_position_rechnung & "','" & mwst_code_position_rechnung & "','" & netto_position_rechnung & "','" & netto_ges_position_rechnung & "')")

      intNewRechPosIndex = intNewRechPosIndex + 1
      Next


   grvRechnungen[grvRechnungen.Row, 2].Text = txtProjektRechnung.Text
   grvRechnungen[grvRechnungen.Row, 3].Text = Format$(valRechnungsdatumRechnung.Value, "yyyy-mm-dd")


     'Status
     If radStatusOffenRechnung.Value = True Then radRechnungOffen.Value = True
     If radStatusBezahltRechnung.Value = True Then radRechnungAlleBez.Value = True
     If radStatusAngebot.Value = True Then radRechnungAngebot.Value = True
     If radStatusCancel.Value = True Then radRechnungCancel.Value = True



   If bolMsgRechSave = True Then Message.Info("Änderung gespeichert")
End




Public Sub btnRechnungKopieren_Click()
Dim strFrage As String

  If radStatusAngebot.Value = True Then
   strFrage = "Angebot"
  Else
   strFrage = "Rechnung"
  Endif


  If Message.Question(strFrage & " kopieren?", "Ja", "Nein") = 2 Then Return

   Rechnungen_einlesen()
   Rechnungsnummer()


   tabRechnung.Index = 0


   radStatusOffenRechnung.Value = True
   grvKundenRechnung.Enabled = True

   Status_Rechnungen(1, 1, 0, 0)
   btn_Rechnungen(1, 0, 0, 0, 0)
   btnAngebot.Visible = True


   grvWarenRechnung.Enabled = True
   grvPositionenRechnung.Enabled = True
   btnZufuegenFreiPosition.Enabled = True
   btnAngebot.Value = False

   Message.Info(strFrage & " wurde als Rechnungsnummer '" & valRechnungsnummer.Value & "'" & Chr(10) & "kopiert. Bitte anpassen und hinzufügen!")

   txtProjektRechnung.SelectAll
End



Public Sub btnNextBill_Click()
Dim intLfz As Integer
Dim datRechTermin As Date

  If spnLaufzeitRechnung.Value = 0 Or btnRechnungHinzufuegen.Enabled = True Then Return
  If Message.Question("Soll die Laufzeit auf 0 gesetzt und die Rechnung kopiert werden?" & Chr(10) & "Die neue Laufzeit und Lieferdatum wird dabei angepasst.", "Ja", "Nein") = 2 Then Return

   datRechTermin = DateAdd(valLieferdatumRechnung.Value, gb.Month, spnLaufzeitRechnung.Value)
   intLfz = spnLaufzeitRechnung.Value 'Merker
   spnLaufzeitRechnung.Value = 0

   myConn.Exec("UPDATE tblFirma_Rechnung SET laufzeit_rechnung='" & spnLaufzeitRechnung.Value &
   "' WHERE id_rechnung = " & valRechnungsnummer.Value)


   Rechnungen_einlesen()
   Rechnungsnummer()


   tabRechnung.Index = 0


   radStatusOffenRechnung.Value = True
   grvKundenRechnung.Enabled = True

   Status_Rechnungen(1, 1, 0, 0)
   btn_Rechnungen(1, 0, 0, 0, 0)
   btnAngebot.Visible = True

   grvWarenRechnung.Enabled = True
   grvPositionenRechnung.Enabled = True
   btnZufuegenFreiPosition.Enabled = True

   spnLaufzeitRechnung.Value = intLfz
   valZahlungseingangRechnung.Value = datEmpty
   valRechnungsdatumRechnung.Value = Date(Now)
   valLieferdatumRechnung.Value = datRechTermin

   valZahlungszielRechnung_LostFocus()
   valSkontoTageRechnung_LostFocus()

   btnAngebot.Value = False

   Message.Info("Die Laufzeitrechnung wurde als Rechnungsnummer '" & valRechnungsnummer.Value & "'" & Chr(10) & "kopiert. Bitte anpassen und hinzufügen!")

   txtProjektRechnung.SelectAll
End





Public Sub txtNettopreisFreiWarenRechnung_Change()
If cbxMwStFreiWarenRechnung.Text = 0 Then txtBruttopreisFreiWarenRechnung.Text = txtNettopreisFreiWarenRechnung.Text
End

Public Sub txtBruttopreisFreiWarenRechnung_Change()
If cbxMwStFreiWarenRechnung.Text = 0 Then txtNettopreisFreiWarenRechnung.Text = txtBruttopreisFreiWarenRechnung.Text
End


 'KeyPress ------------------------------------------------->Start
 'nur Zahlen, Komma und Minus zulassen

Public Sub txtNettopreisFreiWarenRechnung_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif
End

Public Sub txtBruttopreisFreiWarenRechnung_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif
End

Public Sub txtMengePosition_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif

End

Public Sub txtMengeFreiWarenRechnung_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif

End

Public Sub txtMengeNeuPosition_KeyPress()

  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif

End

 'KeyPress ------------------------------------------------->Ende

















'------------------------- Funktionen Rechnungen ------------------------------------


Public Sub KleinFA()    ' bolKleinFA
  'Firmen SQL Abfrage
  rsSQLKleinFA = myConn.Exec("SELECT kleinunternehmen_firma FROM tblFirmen WHERE id_firma=" & valNrFirmaRechnung.Value)
  If rsSQLKleinFA!kleinunternehmen_firma = True Then
    bolKleinFA = True
  Else
    bolKleinFA = False
  Endif

End




Public Sub cbxRechnungFirmaNr_einlesen()
'Firmen Nr in ComboBox einlesen
Dim c As Integer

  cbxRechnungFirmaNr.ReadOnly = False

  cbxRechnungFirmaNr.Clear
  rsSQLFirmen = myConn.Exec("SELECT id_firma FROM tblFirmen ORDER BY id_firma")

  If rsSQLFirmen.Count > 0 Then
     rsSQLFirmen.MoveFirst
  For c = 1 To rsSQLFirmen.Count

  If cbxRechnungFirmaNr.Find(rsSQLFirmen!id_firma) = -1 Then
  cbxRechnungFirmaNr.Add(rsSQLFirmen!id_firma)
  Endif
  rsSQLFirmen.MoveNext
  Next
  Endif

  cbxRechnungFirmaNr.ReadOnly = True
End







Public Sub Rechnungsnummer()
'Rechnungsnummer erzeugen: FA-ID & JahrMonat & fld.Nummer
'Status Rechnung 30 sind die Angebote, deshalb <>30 !

   rsSQLRechnungNr = myConn.Exec("SELECT id_rechnung FROM tblFirma_Rechnung WHERE status_rechnung<>30 AND id_firma_rechnung='" & valNrFirmaRechnung.Value & "' ORDER BY id_rechnung DESC")
   rsSQLRechnungNr.MoveFirst

   If rsSQLRechnungNr.Count > 0 Then
       valRechnungsnummer.Value = rsSQLRechnungNr!id_rechnung + 1
       'zerlege die Rechnungsnummer ohne FA-ID & JahrMonat (JahrMonat ist 4stellig)
       strLfdRNr = Right$(Str$(valRechnungsnummer.Value), Len(Str$(valRechnungsnummer.Value)) - (4 + Len(CString(valNrFirmaRechnung.Value))))
       'schreibe die Rechnungsnr. neu
       valRechnungsnummer.Value = valNrFirmaRechnung.Value & intJahrMonat & strLfdRNr
       intNewRechNrIndex = valRechnungsnummer.Value ' Merker für neuen DS!
   Else
    valRechnungsnummer.Value = valNrFirmaRechnung.Value & intJahrMonat & "0001"
    intNewRechNrIndex = valRechnungsnummer.Value ' Merker für neuen DS!
   Endif
End



Public Sub btn_Rechnungen(RnHinzufuegen As Boolean, RnNeu As Boolean, RnAendern As Boolean, RnKopieren As Boolean, RnDrucken As Boolean)
 'Buttons im TabStrip Kunden aktivieren/deaktivieren
  btnRechnungHinzufuegen.Enabled = RnHinzufuegen
  btnRechnungNeu.Enabled = RnNeu
  btnRechnungAendern.Enabled = RnAendern
  btnRechnungKopieren.Enabled = RnKopieren
  btnRechnungDrucken.Enabled = RnDrucken


  'Filter Adr.-Typ aus
  If btnRechnungHinzufuegen.Enabled = 0 Then
   chkFilterAdressentypRechnung.Value = False
   chkFilterAdressentypRechnung.Enabled = False
   cbxAdressentypRechnungKunde.Enabled = False
   cbxRechnungKundenSort.Enabled = False
  Else
   chkFilterAdressentypRechnung.Enabled = True
   cbxRechnungKundenSort.Enabled = True
  Endif

  'Rechnungsnummer Farbe
  If btnRechnungHinzufuegen.Enabled = True Then
     valRechnungsnummer.Foreground = Color.SelectedForeground
     lblWarenRechnungInfo.Text = "Waren können per Doppelklick in die Rechnungsposition eingefügt werden"
   Else
     valRechnungsnummer.Foreground = Color.DEFAULT
     If radStatusOffenRechnung.Value = True Then lblWarenRechnungInfo.Text = "Das nachträgliche ändern der Positionen, speichert die Rechnung sofort!"
  Endif


    tabRechnung[0].Text = "Kunden"
    tabRechnung[1].Text = "Waren"
End



Public Sub Status_Rechnungen(StaOffRech As Boolean, StaBezRech As Boolean, StaAngebot As Boolean, StaCancel As Boolean)
 'fraStatusRechnung
  radStatusOffenRechnung.Enabled = StaOffRech
  radStatusBezahltRechnung.Enabled = StaBezRech
  radStatusAngebot.Enabled = StaAngebot
  radStatusCancel.Enabled = StaCancel

    tabRechnung[0].Text = "Kundendaten"
    tabRechnung[1].Text = "Waren"
    tabRechnung[2].Text = "Rechnungsdaten"
End



Public Sub Felder_Kunde_Rechnung_leeren()
  txtProjektRechnung.Clear
  valNrFirmaRechnung.Value = Null
  txtFirmaKundeRechnung.Clear
  txtIhrZeichenRechnung.Clear
  valIDKundeRechnung.Value = Null
  txtEMailKundeRechnung.Clear
  txtAnredeKundeRechnung.Clear
  txtNameKundeRechnung.Clear
  txtVornameKundeRechnung.Clear
  txtAbteilungKundeRechnung.Clear
  txtStrasseKundeRechnung.Clear
  txtPLZKundeRechnung.Clear
  txtOrtKundeRechnung.Clear
  txtSuchenRechnung.Clear

  Kunden_Rechnung_einlesen()
End

Public Sub Felder_Rechnungsdaten_leeren()
  valBestelldatumRechnung.Value = datEmpty
  valRechnungsdatumRechnung.Value = datEmpty
  valLieferdatumRechnung.Value = datEmpty
  valZahlungseingangRechnung.Value = datEmpty
  valZahlungsfristSkonto.Value = datEmpty
  valZahlungsfristRechnung.Value = datEmpty
  spnLaufzeitRechnung.Value = 0
  spnRabattRechnung.Value = 0
  radStatusOffenRechnung.Value = True
  cbxLieferartRechnung.Text = ""
  txtAuftraggeberRechnung.Text = ""
  txtAbholerRechnung.Text = ""
  txtNettoErmRechnung.Text = ""
  txtMwStErmRechnung.Text = ""
  txtBruttoErmRechnung.Text = ""
  txtNettoVollRechnung.Text = ""
  txtMwStVollRechnung.Text = ""
  txtBruttoVollRechnung.Text = ""
  txtNettoGesamtRechnung.Text = ""
  txtMwStGesamtRechnung.Text = ""
  txtBruttoGesamtRechnung.Text = ""
  ediBemerkungRechnung.Text = ediBemerkungRechnung2.Text
  ediBemerkungIntRechnung.Text = ""
End



Public Sub Angebot()
Dim strLfdRNr As String

  If radStatusAngebot.Value = True Then
    valBestelldatumRechnung.Enabled = False
    valLieferdatumRechnung.Enabled = False
    valZahlungseingangRechnung.Enabled = False
    lblRechnungsdatumRechnung.Text = "Angebotsdatum"
    lblRechnungsnummer.Text = "Angeb.-Nr."
    valRechnungsnummer.ToolTip = "Nr"
  Else
    radRechnungAngebot.Enabled = True
    valBestelldatumRechnung.Enabled = True
    valLieferdatumRechnung.Enabled = True
    valZahlungseingangRechnung.Enabled = True
    lblRechnungsdatumRechnung.Text = "Rechnungsdatum"
    lblRechnungsnummer.Text = "Rech.-Nr."
    valRechnungsnummer.ToolTip = "JahrMonat - RechNr"
  Endif



  If radStatusOffenRechnung.Value = True Then
    grvWarenRechnung.Enabled = True
    grvPositionenRechnung.Enabled = True
    btnZufuegenFreiPosition.Enabled = True
  Endif

  If radStatusCancel.Value = True Then
    grvWarenRechnung.Enabled = False
    grvPositionenRechnung.Enabled = False
    btnZufuegenFreiPosition.Enabled = False
  Endif

End




Public Sub Waren_Rechnung_einlesen()
'SQL SELECT
  Dim c, y, z As Integer

    rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY id_waren")
    rsSQLWaren.MoveLast
    If rsSQLWaren.Count = 0 Then Return


   If chkLieferantFilterRechnung.Value = True Then ' Filter nach Lieferanten, Bereich-Waren + sortieren


   If chkBereichFilterRechnung.Value = True Then ' Filter Lieferanten, Bereich-Waren + sortieren
     Select Case cbxRechnungWarenSort.Text
       Case "Nr"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' AND lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY id_waren")
       Case "Lieferant"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' AND lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY lieferant_waren")
       Case "Bereich"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' AND lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY bereich_waren")
       Case "Kategorie"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' AND lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY kategorie_waren")
       Case "Beschreibung"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' AND lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY beschreibung_waren")
     End Select

         Else ' Filter Bereich-Waren + sortieren

     Select Case cbxRechnungWarenSort.Text
       Case "Nr"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY id_waren")
       Case "Lieferant"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY lieferant_waren")
       Case "Bereich"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY bereich_waren")
       Case "Kategorie"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY kategorie_waren")
       Case "Beschreibung"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY beschreibung_waren")
     End Select


   Endif

      Else 'alle Lieferanten: Filter nach Bereich-Waren + sortieren

   If chkBereichFilterRechnung.Value = True Then

     Select Case cbxRechnungWarenSort.Text
       Case "Nr"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' ORDER BY id_waren")
       Case "Lieferant"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' ORDER BY lieferant_waren")
       Case "Bereich"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' ORDER BY bereich_waren")
       Case "Kategorie"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' ORDER BY kategorie_waren")
       Case "Beschreibung"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren WHERE bereich_waren='" & cbxWNBereichRechnung.Text & "' ORDER BY beschreibung_waren")
     End Select

          Else   'nur sortieren

     Select Case cbxRechnungWarenSort.Text
       Case "Nr"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY id_waren")
       Case "Lieferant"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY lieferant_waren")
       Case "Bereich"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY bereich_waren")
       Case "Kategorie"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY kategorie_waren")
       Case "Beschreibung"
        rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY beschreibung_waren")
     End Select
   Endif


   Endif ' Ende chkLieferantFilterRechnung.Value


 If rsSQLWaren.Count = 0 Then
  Message.Warning("Keine Daten in 'Waren' vorhanden!")
  chkLieferantFilterRechnung.Value = False
  Return
 Endif




  'Spalten anlegen
  grvWarenRechnung.Columns.Count = 6
  grvWarenRechnung.Columns[0].Text = "Nr"
  grvWarenRechnung.Columns[1].Text = "Lieferant"
  grvWarenRechnung.Columns[2].Text = "Bereich"
  grvWarenRechnung.Columns[3].Text = "Kategorie"
  grvWarenRechnung.Columns[4].Text = "Beschreibung"
  grvWarenRechnung.Columns[5].Text = "Bestand"


  grvWarenRechnung.Rows.Count = rsSQLWaren.Count + 1 'Anzahl DS Waren

  grvWarenRechnung.Columns[0].Width = 80
  grvWarenRechnung.Columns[1].Width = 120
  grvWarenRechnung.Columns[2].Width = 120
  grvWarenRechnung.Columns[3].Width = 120
  grvWarenRechnung.Columns[4].Width = 280
  grvWarenRechnung.Columns[5].Width = 60
  grvWarenRechnung.Rows[0].Height = 0 'Reihe 0 verstecken

  rsSQLWaren.MoveFirst

  For c = 1 To rsSQLWaren.Count  'Liste Waren auf
  grvWarenRechnung[c, 0].Alignment = Align.Right
  grvWarenRechnung[c, 0].Text = Format$(rsSQLWaren!id_waren, "00000")
  grvWarenRechnung[c, 1].Text = rsSQLWaren!lieferant_waren
  grvWarenRechnung[c, 2].Text = rsSQLWaren!bereich_waren
  grvWarenRechnung[c, 3].Text = rsSQLWaren!kategorie_waren
  grvWarenRechnung[c, 4].Text = rsSQLWaren!beschreibung_waren
  grvWarenRechnung[c, 5].Alignment = Align.Right
   If rsSQLWaren!nichtlager_waren = False Then
    grvWarenRechnung[c, 5].Text = Format$(rsSQLWaren!bestand_waren, "0.0")
   Else
    grvWarenRechnung[c, 5].Text = "ns" ' non-stockable item
   Endif
  rsSQLWaren.MoveNext
  Next

  ' Tabellen Farben auf Standard setzen
  For y = 0 To grvWarenRechnung.Rows.Count - 1
  For z = 0 To grvWarenRechnung.Columns.Count - 1
    grvWarenRechnung[y, z].Background = Color.White
    grvWarenRechnung[y, z].Foreground = Color.Black
  Next
  Next

  grvWarenRechnung.ToolTip = "Anzahl: " & (grvWarenRechnung.Rows.Count - 1)

End




Public Sub cbxRechnungBereich_einlesen()
'Bereich in ComboBox einlesen
Dim c As Integer

  cbxWNBereichRechnung.Clear

   If chkBereichFilterRechnung.Value = True Then
   rsSQLWaren = myConn.Exec("SELECT bereich_waren FROM tblWaren WHERE lieferant_waren='" & cbxWNLieferantRechnung.Text & "' ORDER BY bereich_waren")

      Else

   rsSQLWaren = myConn.Exec("SELECT bereich_waren FROM tblWaren ORDER BY bereich_waren")
   Endif


  If rsSQLWaren.Count > 0 Then
     rsSQLWaren.MoveFirst
  For c = 1 To rsSQLWaren.Count

  If cbxWNBereichRechnung.Find(rsSQLWaren!bereich_waren) = -1 Then
  cbxWNBereichRechnung.Add(rsSQLWaren!bereich_waren)
  Endif
  rsSQLWaren.MoveNext
  Next
  Endif
End






Public Sub cbxWNLieferantRechnung_einlesen()
 'Lieferanten in Waren ComboBox einlesen
  Dim c As Integer

  cbxWNLieferantRechnung.Clear
  rsSQLLieferanten = myConn.Exec("SELECT name_lieferanten FROM tblLieferanten ORDER BY name_lieferanten")

  If rsSQLLieferanten.Count > 0 Then
     rsSQLLieferanten.MoveFirst
  For c = 1 To rsSQLLieferanten.Count
     If cbxWNLieferantRechnung.Find(rsSQLLieferanten!name_lieferanten) = -1 Then
     cbxWNLieferantRechnung.Add(rsSQLLieferanten!name_lieferanten)
     Endif
  rsSQLLieferanten.MoveNext
  Next
  Endif
End




Public Sub Positionen_Rechnung_formatieren()

'Liste "Positionen Rechnung" formatieren

 grvPositionenRechnung.Columns.Count = 8
 grvPositionenRechnung.Columns[0].Text = "ArtNr"
 grvPositionenRechnung.Columns[1].Text = "Kategorie"
 grvPositionenRechnung.Columns[2].Text = "Beschreibung"
 grvPositionenRechnung.Columns[3].Text = "Menge"
 grvPositionenRechnung.Columns[4].Text = "MwSt"
 grvPositionenRechnung.Columns[5].Text = "E-Preis"
 grvPositionenRechnung.Columns[6].Text = "Gesamt"
 grvPositionenRechnung.Columns[7].Text = "Code" 'MwSt Code

 If grvPositionenRechnung.Rows.Count = 0 Then
   grvPositionenRechnung.Rows.Count = grvPositionenRechnung.Rows.Count + 1
 Endif


 grvPositionenRechnung.Columns[0].Width = 60
 grvPositionenRechnung.Columns[1].Width = 130
 grvPositionenRechnung.Columns[3].Width = 60

  If bolKleinFA = False Then
   grvPositionenRechnung.Columns[2].Width = 300
   grvPositionenRechnung.Columns[4].Width = 50 ' MwSt
    Else
   grvPositionenRechnung.Columns[2].Width = 350
   grvPositionenRechnung.Columns[4].Width = 0  ' MwSt
  Endif

 grvPositionenRechnung.Columns[5].Width = 80
 grvPositionenRechnung.Columns[6].Width = 80
 grvPositionenRechnung.Columns[7].Width = 0 'MwSt Code

 grvPositionenRechnung.Rows[0].Height = 0

End



Public Sub Waren_Rechnung_abziehen()
 'Warenbestand anpassen
 Dim r, i As Integer
 Dim wa, wi, ws As Float


  For r = 1 To grvPositionenRechnung.Rows.Count - 1

    i = Val(grvPositionenRechnung[r, 0].Text) ' ID
    If i > 0 Then ' Produkt 0 ist nicht in der Warenliste enthalten (manuell hinzugefügt)

      wa = Val(grvPositionenRechnung[r, 3].Text)

      'Warenbestand ist
      rsSQLWarenAbz = myConn.Exec("SELECT bestand_waren, nichtlager_waren FROM tblWaren WHERE id_waren=" & i)
      wi = rsSQLWarenAbz!bestand_waren

      'Warenbestand soll
      ws = wi - wa

      'Abzug Warenbestand wenn Lagerware = true (non-stockable items werden nicht abgezogen ;-)
      If rsSQLWarenAbz!nichtlager_waren = False Then myConn.Exec("UPDATE tblWaren SET bestand_waren=" & ws & " WHERE id_waren=" & i)

    Endif
  Next
End




Public Sub Waren_Rechnung_abziehen_Zeile()
 'Warenbestand der aktiven Zeile anpassen
 Dim i As Integer
 Dim wa, wi, ws As Float


If btnRechnungAendern.Enabled Then ' also ist es eine bestehende Rechnung


    i = Val(grvPositionenRechnung[grvPositionenRechnung.Row, 0].Text) ' ID
    If i > 0 Then ' Produkt 0 ist nicht in der Warenliste enthalten (manuell hinzugefügt)

      wa = Val(grvPositionenRechnung[grvPositionenRechnung.Row, 3].Text)

      'Warenbestand ist
      rsSQLWaren = myConn.Exec("SELECT bestand_waren, nichtlager_waren FROM tblWaren WHERE id_waren=" & i)
      Try wi = rsSQLWaren!bestand_waren ' try für den Fall das die Ware gelöscht wurde

      'Warenbestand soll
       ws = wi - wa + floRechPosMenge '(Menge vor dem Ändern)

      'Abzug Warenbestand wenn Lagerware = true (non-stockable items werden nicht abgezogen ;-)
      If rsSQLWaren!nichtlager_waren = False Then myConn.Exec("UPDATE tblWaren SET bestand_waren=" & ws & " WHERE id_waren=" & i)


        Waren_Rechnung_einlesen()
        Waren_einlesen()

        bolMsgRechSave = False ' Savemessage unterdrücken
        btnRechnungAendern_Click() 'Save
        bolMsgRechSave = True
    Endif

Endif

End






Public Sub Rechnungsbetrag_berechnen()
 Dim r As Integer
 Dim e As Boolean = False 'Error


 'Firma_Rechnung SQL Abfrage für MwSt (damit die MwSt% auch bei alten Rechnungen stimmt)
 rsSQLRechnung = myConn.Exec("SELECT id_rechnung, mwst_erm_rechnung_proz, mwst_voll_rechnung_proz FROM tblFirma_Rechnung WHERE id_rechnung=" & valRechnungsnummer.Value)

 Try mwst_erm_rechnung_proz = rsSQLRechnung!mwst_erm_rechnung_proz
 Try mwst_voll_rechnung_proz = rsSQLRechnung!mwst_voll_rechnung_proz
 If Error Then
  mwst_erm_rechnung_proz = Val(txtEinstMwStErm.Text)
  mwst_voll_rechnung_proz = Val(txtEinstMwStVoll.Text)
  e = True  ' der neue DS wurde noch nicht gespeichert
 Endif


If e = False Then
   'Kleinunternehmen?
   If bolKleinFA = False 'wichtig!
   If rsSQLRechnung!id_rechnung = valRechnungsnummer.Text And mwst_voll_rechnung_proz = 0 Then ' wenn eine bestehende Rechnung mit 0% mwst geladen wird
     Message.Warning("Diese Rechnung wurde als Kleinunternehmen geschrieben!" & Chr(10) & "Die Firma wird nun als Kleinunternehmen umgeschaltet (keine USt).")
      myConn.Exec("UPDATE tblFirmen SET kleinunternehmen_firma=" & 1 & " WHERE id_firma = " & valNrFirmaRechnung.Value)
       bolKleinFA = True
        cbxMwSt_einlesen()
         'Positionen_Rechnung_formatieren()
   Endif
   Endif

   'KEIN Kleinunternehmen?
   If bolKleinFA = True 'wichtig!
   If rsSQLRechnung!id_rechnung = valRechnungsnummer.Text And mwst_voll_rechnung_proz > 0 Then ' wenn eine bestehende Rechnung mit mwst geladen wird
     Message.Warning("Diese Rechnung wurde als NICHT Kleinunternehmen geschrieben!" & Chr(10) & "Die Firma wird nun umgeschaltet (USt aktiv).")
      myConn.Exec("UPDATE tblFirmen SET kleinunternehmen_firma=" & 0 & " WHERE id_firma = " & valNrFirmaRechnung.Value)
       bolKleinFA = False
        cbxMwSt_einlesen()
         'Positionen_Rechnung_formatieren()
   Endif
   Endif
Endif ' e (Error)


  Positionen_Rechnung_formatieren()


  txtNettoErmRechnung.Text = Format$(0, "0.00")
  txtNettoVollRechnung.Text = Format$(0, "0.00")
  txtNettoGesamtRechnung.Text = Format$(0, "0.00")
  txtMwStErmRechnung.Text = Format$(0, "0.00")
  txtMwStVollRechnung.Text = Format$(0, "0.00")
  txtMwStGesamtRechnung.Text = Format$(0, "0.00")
  txtBruttoErmRechnung.Text = Format$(0, "0.00")
  txtBruttoVollRechnung.Text = Format$(0, "0.00")
  txtBruttoGesamtRechnung.Text = Format$(0, "0.00")




  For r = 1 To grvPositionenRechnung.Rows.Count - 1
    If Val(grvPositionenRechnung[r, 7].Text) = 1 Then ' Netto ermäßigte Mehrwertsteuer
      txtNettoErmRechnung.Text = Format$(Round(Val(txtNettoErmRechnung.Text) + Val(grvPositionenRechnung[r, 3].Text) * Val(grvPositionenRechnung[r, 5].Text) / 100 * (100 - spnRabattRechnung.Value), -2), "0.00")
    Else If Val(grvPositionenRechnung[r, 7].Text) = 2 Then ' Netto volle Mehrwertsteuer
      txtNettoVollRechnung.Text = Format$(Round(Val(txtNettoVollRechnung.Text) + Val(grvPositionenRechnung[r, 3].Text) * Val(grvPositionenRechnung[r, 5].Text) / 100 * (100 - spnRabattRechnung.Value), -2), "0.00")
    Else If Val(grvPositionenRechnung[r, 7].Text) = 0 Then ' Kleinunternehmer
      txtNettoVollRechnung.Text = Format$(Round(Val(txtNettoVollRechnung.Text) + Val(grvPositionenRechnung[r, 3].Text) * Val(grvPositionenRechnung[r, 5].Text) / 100 * (100 - spnRabattRechnung.Value), -2), "0.00")
    Endif
  Next



 If bolKleinFA = False Then
  ' ermäßigte Mehrwertsteuer
  txtMwStErmRechnung.Text = Format$(Round(Val(txtNettoErmRechnung.Text) * mwst_erm_rechnung_proz / 100, -2), "0.00")
  txtBruttoErmRechnung.Text = Format$(Round(Val(txtNettoErmRechnung.Text) + Val(txtMwStErmRechnung.Text), -2), "0.00")

  ' volle Mehrwertsteuer
  txtMwStVollRechnung.Text = Format$(Round(Val(txtNettoVollRechnung.Text) * mwst_voll_rechnung_proz / 100, -2), "0.00")
  txtBruttoVollRechnung.Text = Format$(Round(Val(txtNettoVollRechnung.Text) + Val(txtMwStVollRechnung.Text), -2), "0.00")

  ' Gesamt
  txtNettoGesamtRechnung.Text = Format$(Round(Val(txtNettoErmRechnung.Text) + Val(txtNettoVollRechnung.Text), -2), "0.00")
  txtMwStGesamtRechnung.Text = Format$(Round(Val(txtMwStErmRechnung.Text) + Val(txtMwStVollRechnung.Text), -2), "0.00")
  txtBruttoGesamtRechnung.Text = Format$(Round(Val(txtBruttoErmRechnung.Text) + Val(txtBruttoVollRechnung.Text), -2), "0.00")
 Else
  txtBruttoGesamtRechnung.Text = Format$(Val(txtNettoVollRechnung.Text) + Val(txtNettoErmRechnung.Text), "0.00")
  txtNettoErmRechnung.Text = Format$(0, "0.00")
  txtNettoVollRechnung.Text = Format$(0, "0.00")
 Endif


End


'-----------------------------------------------------------------------------------
'-----------------------------------------------------------------------------------
'------------------------------ Rechnung--------------------------------------> Ende



' ---------------------------------------------------------------------------


Public Sub chkWnNichtLagerArtikel_Click()
  If chkWnNichtLagerArtikel.Value = True Then
    txtWnBestandIst.Enabled = False
    lblWnBestandIst.Enabled = False
    txtWnBestandMin.Enabled = False
    lblWnBestandMin.Enabled = False
    fraWnBestandAendern.Enabled = False
  Else
    txtWnBestandIst.Enabled = True
    lblWnBestandIst.Enabled = True
    txtWnBestandMin.Enabled = True
    lblWnBestandMin.Enabled = True
    fraWnBestandAendern.Enabled = True
  Endif
End

' ---------------------------------------------------------------------------






'-------------------------------------------------------------------------------------------------
'-------------------------------------------------------------------------------------------------
'------------------------- Tools und Sonstiges --------------------------------------------> Start

Public Sub mnuDBopti_Click()
  modDBTools.DB_optimize(frmAnmelden.txtDatenbank.Text, frmAnmelden.txtUser.Text, frmAnmelden.txtPasswort.Text)
End


Public Sub mnuCalculator_Click()
  Try Shell "gcalctool"     'GNOME & Xfce
  Try Shell "kcalc"         'KDE
End



Public Sub Info_Click()
  Message.Info("dbKuWa3 ist ein freies Rechnungs- Kunden & Warenverwaltungsprogramm" & Chr(10) & "für Linux Debian und entwickelt mit Gambas3/Qt4" & Chr(10) & "Version: " & Application.Version & Chr(10) & "www.jolichter.de" & Chr(10) & Chr(10) &
  "Die Benutzung des Programms geschieht auf eigene Gefahr." & Chr(10) & "Für Schäden, die durch den Gebrauch des Programms auftreten, haftet der Programmautor nicht!")
End

Public Sub mnuHilfe_Click()
  frmHilfe.Show()
End


Public Sub mnuDBBackup_Click()
Dim strBakName, strDB As String

strVerz = User.Home & "/dbKuWa3/" & strDBName
strVerzBackup = strVerz & "/backup"

 If Not Exist(strVerz) Then
  Try Mkdir strVerz ' wenn nötig erstelle dbKuWa3 Verzeichnis
 Endif

 If Not Exist(strVerzBackup) Then
  Try Mkdir strVerzBackup ' wenn nötig erstelle Backup Verzeichnis
 Endif


  strDB = "/" & frmAnmelden.txtDatenbank.Text & "_"
  strBakName = strVerzBackup & strDB & Format$(Now, "yyyy-mm-dd_hhnnss") & ".sql"

  Application.Busy = 1
  Try Shell "mysqldump" & " -u " & frmAnmelden.txtUser.Text & " -p" & frmAnmelden.txtPasswort.Text &
  " " & frmAnmelden.txtDatenbank.Text & " --add-drop-table" & " > " & strBakName & " 2>/tmp/result" Wait
  Application.Busy = 0

  Message.Info("SQL-Backup gespeichert. Ort und Dateiname: " & Chr(10) & strBakName)
End




Public Sub mnuDBRestore_Click()
Dim strBakName As String

If Message.Question("Achtung! Alle bestehenden Daten werden dabei gelöscht! Weiter machen?", "Ja", "Nein") = 1 Then

  Dialog.Filter = ["*.sql", "SQL Files"]
  Dialog.Path = User.Home & "/dbKuWa3/" & strDBName & "/backup"
  Dialog.Title = "SQL Backupdatei laden"
  If Dialog.OpenFile() Then Return
  strBakName = Dialog.Path

  Application.Busy = 1
  Try Shell "mysql" & " -u " & frmAnmelden.txtUser.Text & " -p" & frmAnmelden.txtPasswort.Text &
  " " & frmAnmelden.txtDatenbank.Text & " <" & strBakName & " 2>/tmp/result" Wait
  Application.Busy = 0

  Message.Info("SQL-Backup wurde geladen." & Chr(10) & "Bitte starten Sie das Programm neu.")
  Me.Close

Endif

End


'------------------------- Tools und Sonstiges --------------------------------------------> Ende
'-------------------------------------------------------------------------------------------------
'-------------------------------------------------------------------------------------------------







' DRUCKEN ------------------------------------>


Public Sub btnRechnungDrucken_Click()

Dim strPdfout As String                       'PDF
Dim strEmailBetreff, strEMailText As String   'eMail Text
'Object.Attach(myPrinter, Me, "myPrinter")


   If radStatusCancel.Value = True Then Return
   If grvPositionenRechnung.Rows.Count - 1 > 20 Then
    Message.Warning("Sorry, zu viele Rechnungspositionen!" & Chr(10) & "(max. 20 pro Rechnung)")
    Return
   Endif


       'Rechnungsnummer formatieren (besser lesbar)
       If radStatusAngebot.Value = True Then
         strRechnungsnummerF = CString(valNrFirmaRechnung.Value) & "-" & Str$(valRechnungsnummer.Value)
       Else
       'zerlege die Rechnungsnummer ohne Firma-Nr & JahrMonat (JahrMonat ist 4stellig)
        strLfdRNr = Right$(Str$(valRechnungsnummer.Value), Len(Str$(valRechnungsnummer.Value)) - (4 + Len(CString(valNrFirmaRechnung.Value))))
        strPrintRechDatum = Mid$(Str$(valRechnungsnummer.Value), Len(CString(valNrFirmaRechnung.Value)) + 1, 4)
        strRechnungsnummerF = CString(valNrFirmaRechnung.Value) & "-" & strPrintRechDatum & "-" & strLfdRNr
       Endif




   If radRechnungVerzug.Value = True Then
    intMSG = Message.Question("Soll die Rechnung als Mahnung raus gehen?", "Ja ", "Nein")
     Select Case intMSG
     Case 1
       bolMahnung = True
     Case 2
       bolMahnung = False
     End Select
   Endif



  'PDF ---------------------------------------------------->
  If chkRechnungPDF.Value = True Then
   strVerz = User.Home & "/dbKuWa3/" & strDBName
   strVerzPDF = strVerz & "/pdf"

   If Not Exist(strVerz) Then
    Try Mkdir strVerz ' wenn nötig erstelle dbKuWa3 Verzeichnis
   Endif

   If Not Exist(strVerzPDF) Then
    Try Mkdir strVerzPDF ' wenn nötig erstelle PDF Verzeichnis
   Endif


    If radStatusAngebot.Value = True Then
    strPdfout = strVerzPDF & "/Angebot_" & strRechnungsnummerF & "_" & modFunctions.Translit(txtNameKundeRechnung.Text) & "." & "pdf"
    Else
          If bolMahnung = True Then
           strPdfout = strVerzPDF & "/Rechnung_" & strRechnungsnummerF & "_" & modFunctions.Translit(txtNameKundeRechnung.Text) & "_Mahnung" & "." & "pdf"
          Else
           strPdfout = strVerzPDF & "/Rechnung_" & strRechnungsnummerF & "_" & modFunctions.Translit(txtNameKundeRechnung.Text) & "." & "pdf"
          Endif
    Endif
  Endif



  'eMail ---------------------------------------------------->
  If chkRechnungOnline.Value = True Then

   'Betreff
  If bolMahnung = True Then
    If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then
     strEmailBetreff = "Mahnung, Rechnung Nr. " & strRechnungsnummerF & " (" & Format$(valRechnungsdatumRechnung.Value, "yyyy-mm-dd") & ") von " & txtFirmaKundeRechnung.Text
    Endif
  Else
    If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then
     strEmailBetreff = "Ihre Rechnung Nr. " & strRechnungsnummerF & " (" & Format$(valRechnungsdatumRechnung.Value, "yyyy-mm-dd") & ") von " & txtFirmaKundeRechnung.Text
    Endif
  Endif

   If radStatusAngebot.Value = True Then
    strEmailBetreff = "Ihr Angebot Nr. " & strRechnungsnummerF & " (" & Format$(valRechnungsdatumRechnung.Value, "yyyy-mm-dd") & ") von " & txtFirmaKundeRechnung.Text
   Endif


   'eMail Text
     Select Case txtAnredeKundeRechnung.Text
       Case "Herr"
       strEMailText = txtAnredeHerr.Text & " " & txtNameKundeRechnung.Text & ","
       Case "Frau"
        strEMailText = txtAnredeFrau.Text & " " & txtNameKundeRechnung.Text & ","
       Case "Familie"
        strEMailText = txtAnredeFamilie.Text & " " & txtNameKundeRechnung.Text & ","
       Case "Herr Dr."
        strEMailText = txtAnredeHerrDr.Text & " " & txtNameKundeRechnung.Text & ","
       Case "Frau Dr."
        strEMailText = txtAnredeFrauDr.Text & " " & txtNameKundeRechnung.Text & ","
       Case "Firma"
        strEMailText = txtAnredeFirma.Text
       Case "Stadt"
        strEMailText = txtAnredeStadt.Text
       Case "Gemeinde"
        strEMailText = txtAnredeGemeinde.Text
       Case "Verein"
        strEMailText = txtAnredeVerein.Text
     End Select

    If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then strEMailText = strEMailText & Chr(10) & Chr(10) & "wir bedanken uns für Ihren Auftrag und anbei erhalten Sie unsere Rechnung über " & txtBruttoGesamtRechnung.Text & " EUR." & Chr(10) & "Die Rechnung ist im PDF-Format erstellt." & Chr(10) & Chr(10) &
                                   "Bei Fragen oder Unklarheiten wenden Sie sich bitte per E-Mail an uns." & Chr(10) & Chr(10) & "Beste Grüße," & Chr(10) & txtFirmaKundeRechnung.Text

    If radStatusAngebot.Value = True Then strEMailText = strEMailText & Chr(10) & Chr(10) & "anbei erhalten Sie unser Angebot." & Chr(10) & "Das Angebot ist im PDF-Format erstellt." & Chr(10) & Chr(10) &
                                   "Bei Fragen oder Unklarheiten wenden Sie sich bitte per E-Mail an uns." & Chr(10) & Chr(10) & ediBemerkungRechnung2.Text & Chr(10) & Chr(10) & Chr(10) & txtFirmaKundeRechnung.Text


    'https://wiki.gnome.org/Apps/Evolution/FAQ -> Chr$(92) ist ein backslash
    'Terminal Syntax für Evolution:
    'evolution mailto:'test@web.de'?cc=''\&subject='Hallo Deutschland'\&body='Ooops, so geht das also'\&attach='/home/test/dbKuWa3/pdf/Rechnung_1-1610-4711_test.pdf'
        
   'wenn GNOME evolution
    Try Shell "evolution mailto:'" & txtEMailKundeRechnung.Text & "'" & "?cc=''" & Chr$(92) & "&subject='" & strEmailBetreff & "'" & Chr$(92) & "&body='" & strEMailText & "'" & Chr$(92) & "&attach='" & strPdfout & "'"
    '
   'wenn KDE kmail
    'Terminal Syntax: kmail mailto: "test@web.de"  --subject="test kmail" --body="huhu ein kmail test" --attach="/home/test/dbKuWa3/pdf/Rechnung_1-1610-4711_test.pdf"
    Try Shell ("kmail mailto:'" & txtEMailKundeRechnung.Text & "'" & " --subject='" & strEmailBetreff & "' --body='" & strEMailText & "' --attach='" & strPdfout & "'")

  Endif 'eMail





  If chkRechnungPDF.Value = False Then
     If myPrinter.Configure() = True Then Return
  With myPrinter
    .FullPage = True
    .FirstPage = 0
    .LastPage = 0 'all pages will be printed
    .Orientation = myPrinter.Portrait 'Hochformat
    .Paper = myPrinter.A4
    .Resolution = 600
    .NumCopies = spnEinstSeitenanzahlRechnung.Value
    .Print 'start the printing process
  End With
          Else
  With myPrinter
    .FullPage = True
    .FirstPage = 0
    .LastPage = 0 'all pages will be printed
    .Orientation = myPrinter.Portrait 'Hochformat
    .Paper = myPrinter.A4
    .Resolution = 600
    .NumCopies = 1
    .OutputFile = strPdfout
    .Print 'start the printing process
  End With
       If chkRechnungOnline.Value = False Then
         Message.Info("PDF erfolgreich erstellt:" & Chr(10) & strPdfout)
       Endif
  Endif

End




Public Sub myPrinter_Begin()
    'Positionen Rechnungen - wieviele Reihen
    intPosRechRows = grvPositionenRechnung.Rows.Count - 1

 'to do ?
 'myPrinter.Count = Round(intPosRechRows / 8, 1)

    ' 2te Seite wenn
    If intPosRechRows > spnEinst2teSeite.Value Then
      myPrinter.Count = 2 'zwei Seiten
    Else
      myPrinter.Count = 1 'eine Seite
    Endif
End


Public Sub myPrinter_End()
'
End





Public Sub myPrinter_Draw()

Dim picLogo As Image                                              'Logo Bild
Dim intXLogo, intYLogo As Integer                                 'Logo Position
Dim intLogoXmax, intLogoXist, intLogoY As Integer                 'Logo max und ist
Dim floLogoV As Float                                             'Logo Seitenverhältnis 1:? (wenn Logo zu groß, entspr. kleiner machen)

Dim intXRechts, intYRechts, intBRechts, intZeiUmbrR As Integer    'Rechts Oben Position, Breite, Zeilenumbruch (rechts)
Dim intXZuRechts, intYZuRechts As Integer                         'Rechts Unten Zusammenfassung usw., Breite
Dim intXURechts, intYURechts, intBURechts As Integer              'Rechts Unten Position, Breite

Dim intXSeiteNeu, intYSeiteNeu As Integer                         'Neue Seite Position

Dim intXFenKu, intYFenKu, intXFenKuDanach As Integer              'Fensterkuvert Position, intXFenKuDanach -> danach richtet sich der Rest
Dim intZeiUmbr As Integer                                         'Zeilenumbruch
Dim intPos, intRow As Integer                                     'Anzahl der Rechnungspositionen

Dim intFix As Integer = 20                                        'BUG? nur wenn Paint.Text mit "Align.Right" dann muss ich 20 Pixel wieder hoch!


intLogoXmax = 500    'max. Pixel Logohöhe

'Position Logo
intXLogo = 22 * intPixelmm
intYLogo = 10 * intPixelmm

'Position rechts oben
intXRechts = 125 * intPixelmm
intYRechts = 10 * intPixelmm
intBRechts = 79 * intPixelmm
intZeiUmbrR = 4 * intPixelmm

'Position Fensterkuvert
intXFenKu = 25 * intPixelmm
intXFenKuDanach = 22 * intPixelmm 'x Position danach
intYFenKu = 50 * intPixelmm
intZeiUmbr = 5 * intPixelmm

'Startpositionen neue Seite
intXSeiteNeu = 22 * intPixelmm
intYSeiteNeu = 10 * intPixelmm

'Zusammenfassung
intXZuRechts = 22 * intPixelmm

'Unten Position
intXURechts = 22 * intPixelmm
intYURechts = 270 * intPixelmm
intBURechts = 50 * intPixelmm



  'SQL Abfragen
  rsSQLFirmen = myConn.Exec("SELECT * FROM tblFirmen WHERE id_firma=" & valNrFirmaRechnung.Value)
  rsSQLKunden = myConn.Exec("SELECT bank_kunde FROM tblKunden WHERE id_kunde=" & valIDKundeRechnung.Value)

  Application.Busy = 1


  'Faltmarken drucken
  Paint.Brush = Paint.Color(Color.Black)
  Paint.LineWidth = 1

  If chkEinstFaltmarkenRechnung.Value = True Then
    Paint.Rectangle(100, intPrinterF1, 150, 1) ' 105mm
    'Paint.Rectangle(100, intPrinterF2, 150, 1) ' 210mm
  Endif

  'Lochmarke drucken
  If chkEinstLochmarkeRechnung.Value = True Then
    Paint.Rectangle(100, intPrinterY / 2 + 50, 150, 1) ' 297mm/2 = 148.5mm   (+ 50 Pixel, dann passt es ;-)
  Endif
  Paint.Stroke







Select Case MyPrinter.Page
'Seite 1 -------------------------------------------------------------------->
Case 1


      Paint.Font.Size = 9
      'LOGO oben links, darunter Bemerkung Firma
      Try picLogo = Image.Load(rsSQLFirmen!logo_firma)
      If picLogo <> Null Then
         'wenn Logo zu groß, dann anpassen
         intLogoXist = picLogo.Height
         If intLogoXist > intLogoXmax Then
            floLogoV = intLogoXist / intLogoXmax 'Seitenverhältnis
            intLogoY = picLogo.Width / floLogoV  'neue Logobreite
            Try Paint.DrawImage(picLogo, intXLogo, intYLogo, intLogoY, intLogoXmax)
            Try Paint.Text(rsSQLFirmen!bemerkung_firma, intXLogo, intYLogo + intLogoXmax + 100)
         Else ' wenn Logogröße OK
            Try Paint.DrawImage(picLogo, intXLogo, intYLogo, picLogo.Width, picLogo.Height)
            Try Paint.Text(rsSQLFirmen!bemerkung_firma, intXLogo, intYLogo + picLogo.Height + 100)
         Endif
      Endif
      'wenn kein Logo
       If picLogo = Null Then Paint.Text(rsSQLFirmen!bemerkung_firma, intXLogo, intYLogo)
       Paint.Fill



   Paint.Font.Size = 8
  'Rechnungsdatum oben rechts
   Paint.Text(lblRechnungsdatumRechnung.Text & ":", intXRechts, intYRechts, intBRechts,, Align.Left)
   Paint.Text(Format$(valRechnungsdatumRechnung.Value, "yyyy-mm-dd"), intXRechts, intYRechts, intBRechts,, Align.Right)

  'Bestelldatum, Lieferdatum, Zahlungsart oben rechts
   If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then
      If valBestelldatumRechnung.Value <> datEmpty Then
        intYRechts = intYRechts + intZeiUmbrR
        Paint.Text("Bestelldatum:", intXRechts, intYRechts, intBRechts,, Align.Left)
        Paint.Text(Format$(valBestelldatumRechnung.Value, "yyyy-mm-dd"), intXRechts, intYRechts, intBRechts,, Align.Right)
      Endif
      If valLieferdatumRechnung.Value <> datEmpty Then
        intYRechts = intYRechts + intZeiUmbrR
        Paint.Text("Lieferdatum:", intXRechts, intYRechts, intBRechts,, Align.Left)
        Paint.Text(Format$(valLieferdatumRechnung.Value, "yyyy-mm-dd"), intXRechts, intYRechts, intBRechts,, Align.Right)
      Endif
    intYRechts = intYRechts + intZeiUmbrR
    Paint.Text("Zahlungsart:", intXRechts, intYRechts, intBRechts,, Align.Left)
    Paint.Text(cbxZahlungsartRechnung.Text, intXRechts, intYRechts, intBRechts,, Align.Right)
      If cbxLieferartRechnung.Text <> "" Then
      intYRechts = intYRechts + intZeiUmbrR
      Paint.Text("Lieferart:", intXRechts, intYRechts, intBRechts,, Align.Left)
      Paint.Text(cbxLieferartRechnung.Text, intXRechts, intYRechts, intBRechts,, Align.Right)
      Endif
   Endif

  'Auftraggeber oben rechts
   If txtAuftraggeberRechnung.Text <> "" Then
    intYRechts = intYRechts + intZeiUmbrR
    Paint.Text("Auftraggeber:", intXRechts, intYRechts, intBRechts,, Align.Left)
    Paint.Text(txtAuftraggeberRechnung.Text, intXRechts, intYRechts, intBRechts,, Align.Right)
   Endif

   'Abholer oben rechts
   If txtAbholerRechnung.Text <> "" Then
    intYRechts = intYRechts + intZeiUmbrR
    Paint.Text("Abholer:", intXRechts, intYRechts, intBRechts,, Align.Left)
    Paint.Text(txtAbholerRechnung.Text, intXRechts, intYRechts, intBRechts,, Align.Right)
   Endif

  'Kundennummer oben rechts
  intYRechts = intYRechts + intZeiUmbrR
  Paint.Text("Kundennummer:", intXRechts, intYRechts, intBRechts,, Align.Left)
  Paint.Text(Format$(valIDKundeRechnung.Value, "0000"), intXRechts, intYRechts, intBRechts,, Align.Right)

  'Ihr Zeichen oben rechts
  If txtIhrZeichenRechnung.Text <> "" Then
   intYRechts = intYRechts + intZeiUmbrR
   Paint.Text("Ihr Zeichen:", intXRechts, intYRechts, intBRechts,, Align.Left)
   Paint.Text(txtIhrZeichenRechnung.Text, intXRechts, intYRechts, intBRechts,, Align.Right)
  Endif

  'Projekt oben rechts
   intYRechts = intYRechts + 2 * intZeiUmbrR
   Paint.Text("Projektbeschreibung:", intXRechts, intYRechts, intBRechts,, Align.Left)
   intYRechts = intYRechts + intZeiUmbrR
   Paint.Text(txtProjektRechnung.Text, intXRechts, intYRechts, intBRechts,, Align.Left)

  'wenn Mahnung, dann mit Mahnungsdatum von Heute
   If bolMahnung = True Then
   intYRechts = intYRechts + 2 * intZeiUmbrR
   Paint.Text("Mahnungsdatum:", intXRechts, intYRechts, intBRechts,, Align.Left)
   Paint.Text(strDatum, intXRechts, intYRechts, intBRechts,, Align.Right)
   Endif



  'Anschrift (Fensterkuvert geeignet)
  Paint.Font.Name = "Sans"
  Paint.Font.Size = 7
  Paint.Text(rsSQLFirmen!name_firma & " - " & rsSQLFirmen!adresse_firma, intXFenKu, intYFenKu)
  intYFenKu = intYFenKu + 2 * intZeiUmbr

  'Empfänger
  Paint.Font.Name = "Sans"
  Paint.Font.Size = 10
  Paint.Text(txtAnredeKundeRechnung.Text, intXFenKu, intYFenKu)
    intYFenKu = intYFenKu + intZeiUmbr
      If txtVornameKundeRechnung.Text <> "" Then
      Paint.Text(txtVornameKundeRechnung.Text & " " & txtNameKundeRechnung.Text, intXFenKu, intYFenKu)
        Else
      Paint.Text(txtNameKundeRechnung.Text, intXFenKu, intYFenKu)
      Endif
    intYFenKu = intYFenKu + intZeiUmbr

  If txtAbteilungKundeRechnung.Text <> "" Then
   Paint.Text(txtAbteilungKundeRechnung.Text, intXFenKu, intYFenKu)
   intYFenKu = intYFenKu + intZeiUmbr
  Endif

  Paint.Text(txtStrasseKundeRechnung.Text, intXFenKu, intYFenKu)
    intYFenKu = intYFenKu + intZeiUmbr + 80
    Paint.Font.Bold = True
  Paint.Text(txtPLZKundeRechnung.Text & " " & txtOrtKundeRechnung.Text, intXFenKu, intYFenKu)


    intYFenKu = intYFenKu + intZeiUmbr + 450


  'wenn kein KundeAbteilung, dann einen Zeilenumbruch addieren
  If txtAbteilungKundeRechnung.Text = "" Then intYFenKu = intYFenKu + intZeiUmbr



  'Betrifft
  Paint.Font.Name = "Sans"
  Paint.Font.Size = 12

  If bolMahnung = True Then
   If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then Paint.Text("Mahnung, Rechnung Nr. " & strRechnungsnummerF, intXFenKuDanach, intYFenKu)
  Else
   If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then Paint.Text("Rechnung Nr. " & strRechnungsnummerF, intXFenKuDanach, intYFenKu)
  Endif

  If radStatusAngebot.Value = True Then Paint.Text("Angebot Nr. " & strRechnungsnummerF, intXFenKuDanach, intYFenKu)
    intYFenKu = intYFenKu + intZeiUmbr
  Paint.Font.Size = 8
  Paint.Font.Bold = False
  If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then Paint.Text(txtTextStatusRechnung.Text, intXFenKuDanach, intYFenKu)
  If radStatusAngebot.Value = True Then Paint.Text(txtTextStatusAngebot.Text, intXFenKuDanach, intYFenKu)


    intYFenKu = intYFenKu + 2 * intZeiUmbr



  Paint.Font.Size = 9
  'Begrüssung
     Select Case txtAnredeKundeRechnung.Text
       Case "Herr"
       Paint.Text(txtAnredeHerr.Text & " " & txtNameKundeRechnung.Text & ",", intXFenKuDanach, intYFenKu)
       Case "Frau"
        Paint.Text(txtAnredeFrau.Text & " " & txtNameKundeRechnung.Text & ",", intXFenKuDanach, intYFenKu)
       Case "Familie"
        Paint.Text(txtAnredeFamilie.Text & " " & txtNameKundeRechnung.Text & ",", intXFenKuDanach, intYFenKu)
       Case "Herr Dr."
       Paint.Text(txtAnredeHerrDr.Text & " " & txtNameKundeRechnung.Text & ",", intXFenKuDanach, intYFenKu)
       Case "Frau Dr."
       Paint.Text(txtAnredeFrauDr.Text & " " & txtNameKundeRechnung.Text & ",", intXFenKuDanach, intYFenKu)
       Case "Firma"
        Paint.Text(txtAnredeFirma.Text, intXFenKuDanach, intYFenKu)
       Case "Stadt"
        Paint.Text(txtAnredeStadt.Text, intXFenKuDanach, intYFenKu)
       Case "Gemeinde"
        Paint.Text(txtAnredeGemeinde.Text, intXFenKuDanach, intYFenKu)
       Case "Verein"
        Paint.Text(txtAnredeVerein.Text, intXFenKuDanach, intYFenKu)
     End Select
    intYFenKu = intYFenKu + intZeiUmbr



    If radStatusAngebot.Value = True Then
     Paint.Text(ediTextEinleitung2.Text, intXFenKuDanach, intYFenKu)
     Else
     If bolMahnung = True Then
      Paint.Text(ediTextMahnung.Text, intXFenKuDanach, intYFenKu)
      Else
      If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then Paint.Text(ediTextEinleitung1.Text, intXFenKuDanach, intYFenKu)
     Endif
    Endif

    Paint.Fill


    intYFenKu = intYFenKu + 4 * intZeiUmbr





'Tabelle Start ---------------------------->
    'Feldnamen Positionen
    Paint.Font.Bold = True
    Paint.Font.Size = 8

    'Linie oben und unten
     With Paint
      .LineWidth = 6
      .Rectangle(intXFenKuDanach, intYFenKu - 80, 183 * intPixelmm, 1)
      .Rectangle(intXFenKuDanach, intYFenKu + intZeiUmbr - 80, 183 * intPixelmm, 1)
      .Stroke
     End With

    'Text
    Paint.Text("ArtNr", intXFenKuDanach, intYFenKu)
    Paint.Text("Kategorie", intXFenKuDanach + 300, intYFenKu)
    Paint.Text("Beschreibung", intXFenKuDanach + 1000, intYFenKu)

    If bolKleinFA = False Then
     Paint.Text("Menge", intXFenKuDanach + 2500, intYFenKu - intFix, 400, 0, Align.Right)
     Paint.Text("MwSt", intXFenKuDanach + 2950, intYFenKu - intFix, 400, 0, Align.Right)
    Else
     Paint.Text("Menge", intXFenKuDanach + 2950, intYFenKu - intFix, 400, 0, Align.Right)
    Endif

    Paint.Text("E-Preis", intXFenKuDanach + 3350, intYFenKu - intFix, 400, 0, Align.Right)
    Paint.Text("Gesamt", intXFenKuDanach + 3800, intYFenKu - intFix, 400, 0, Align.Right)

    Paint.Font.Bold = False
    intYFenKu = intYFenKu + intZeiUmbr


    'Positionen
    intPos = grvPositionenRechnung.Rows.Count - 1
    For intRow = 1 To intPos

      Paint.Text(grvPositionenRechnung[intRow, 0].Text, intXFenKuDanach, intYFenKu)
      Paint.Text(grvPositionenRechnung[intRow, 1].Text, intXFenKuDanach + 300, intYFenKu)
      Paint.Text(grvPositionenRechnung[intRow, 2].Text, intXFenKuDanach + 1000, intYFenKu)

    If bolKleinFA = False Then
      Paint.Text(grvPositionenRechnung[intRow, 3].Text, intXFenKuDanach + 2500, intYFenKu - intFix, 400, 0, Align.Right)
      Paint.Text(grvPositionenRechnung[intRow, 4].Text & "%", intXFenKuDanach + 2950, intYFenKu - intFix, 400, 0, Align.Right)
    Else
      Paint.Text(grvPositionenRechnung[intRow, 3].Text, intXFenKuDanach + 2950, intYFenKu - intFix, 400, 0, Align.Right)
    Endif

      Paint.Text(grvPositionenRechnung[intRow, 5].Text & "€", intXFenKuDanach + 3350, intYFenKu - intFix, 400, 0, Align.Right)
      Paint.Text(grvPositionenRechnung[intRow, 6].Text & "€", intXFenKuDanach + 3800, intYFenKu - intFix, 400, 0, Align.Right)

      Paint.Fill

    'Positions-Linien
    With Paint
      .LineWidth = 2
      .Rectangle(intXFenKuDanach, intYFenKu + intZeiUmbr - 80, 183 * intPixelmm, 1)
      .Stroke
    End With

    intYFenKu = intYFenKu + intZeiUmbr

       If intPos = intRow Then
         Paint.Font.Size = 6
         Paint.Text("(" & intPos & " Positionen)", intXFenKuDanach, intYFenKu)
         Paint.Font.Size = 8
       Endif

    Next ' Positionen Ende

'Tabelle Ende ----------------------------<





If myPrinter.Count = 1
   'Zusammenfassung der Beträge schreiben wenn eine Seite ------------------------------------------------->

    intYZuRechts = intYFenKu + intZeiUmbr    ' Position für die Zusammenfassung festlegen

    'Zusammenfassung der Beträge
    Paint.Font.Size = 8

    'Gesamt Netto
    If bolKleinFA = False Then
       If spnRabattRechnung.Value > 0 Then
        Paint.Text("Gesamt Netto (-" & spnRabattRechnung.Value & "%)", intXZuRechts + 3000, intYZuRechts - intFix, 400, 0, Align.Left)
         Else
        Paint.Text("Gesamt Netto", intXZuRechts + 3000, intYZuRechts - intFix, 400, 0, Align.Left)
       Endif
    Paint.Text(txtNettoGesamtRechnung.Text & "€", intXZuRechts + 3800, intYZuRechts - intFix, 400, 0, Align.Right)
    Endif

    'Erm. MwSt
    If bolKleinFA = False And Val(txtNettoErmRechnung.Text) > 0 Then
     intYZuRechts = intYZuRechts + intZeiUmbr
     Paint.Text("MwSt " & mwst_erm_rechnung_proz & "%", intXZuRechts + 3000, intYZuRechts - intFix, 400, 0, Align.Left)
     Paint.Text(txtMwStErmRechnung.Text & "€", intXZuRechts + 3800, intYZuRechts - intFix, 400, 0, Align.Right)
    Endif

    'Volle MwSt
    If bolKleinFA = False And Val(txtNettoVollRechnung.Text) > 0 Then
     intYZuRechts = intYZuRechts + intZeiUmbr
     Paint.Text("MwSt " & mwst_voll_rechnung_proz & "%", intXZuRechts + 3000, intYZuRechts - intFix, 400, 0, Align.Left)
     Paint.Text(txtMwStVollRechnung.Text & "€", intXZuRechts + 3800, intYZuRechts - intFix, 400, 0, Align.Right)
    Endif

    'Gesamtbetrag
     Paint.Font.Bold = True
     intYZuRechts = intYZuRechts + intZeiUmbr
     Paint.Text("Gesamtbetrag", intXZuRechts + 3000, intYZuRechts - intFix, 400, 0, Align.Left)
     Paint.Text(txtBruttoGesamtRechnung.Text & "€", intXZuRechts + 3800, intYZuRechts - intFix, 400, 0, Align.Right)
     Paint.Font.Bold = False

     Paint.Fill

    'Linie oben und unten
     With Paint
      .LineWidth = 6
      .Rectangle(intXZuRechts + 125 * intPixelmm, intYZuRechts - 80, 58 * intPixelmm, 1)
      .Rectangle(intXZuRechts + 125 * intPixelmm, intYZuRechts + intZeiUmbr - 70, 58 * intPixelmm, 1)
      .Stroke
    End With



  intYZuRechts = intYZuRechts + 2 * intZeiUmbr

  'wenn Umsatzsteuerbefreit
  If bolKleinFA = True Then
    Paint.Text("Umsatzsteuerbefreit nach §19 UStG", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    intYZuRechts = intYZuRechts + intZeiUmbr
  Endif
  'Rabatt
  If spnRabattRechnung.Value > 0 Then
    Paint.Text("Im Betrag ist ein Rabatt von " & spnRabattRechnung.Value & "% enthalten", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    intYZuRechts = intYZuRechts + intZeiUmbr
  Endif
  'Skonto
  If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then
    If valSkontoRechnungen2.Value > 0 Then Paint.Text("Skonto " & valSkontoRechnungen2.Value & "% bis " & Format$(valZahlungsfristSkonto.Value, "yyyy-mm-dd"), intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    intYZuRechts = intYZuRechts + intZeiUmbr
  Endif
  'Zahlungsziel
  If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then
    Paint.Text("Der Gesamtbetrag von " & txtBruttoGesamtRechnung.Text & "€ ist zahlbar bis " & Format$(valZahlungsfristRechnung.Value, "yyyy-mm-dd"), intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    intYZuRechts = intYZuRechts + intZeiUmbr
        If cbxZahlungsartRechnung.Text = "Abbuchung" Then
          Paint.Text("Wir buchen den Betrag von Ihrem Konto ab:", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
          intYZuRechts = intYZuRechts + intZeiUmbr
          Paint.Text(rsSQLKunden!bank_kunde, intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
          intYZuRechts = intYZuRechts + intZeiUmbr
        Endif
  Endif

   'Bemerkung unten
   Paint.Font.Size = 9
   intYZuRechts = intYZuRechts + intZeiUmbr
   Paint.Text(ediBemerkungRechnung.Text, intXZuRechts, intYZuRechts)

Endif ' myPrinter.Count = 1

Paint.Fill





'Seite 2 -------------------------------------------------------------------->
Case 2
    'Zusammenfassung der Beträge schreiben wenn zweite Seite ------------------------------------------------->

    Paint.Font.Size = 8

    Paint.Text("Nr. " & strRechnungsnummerF & " Übertrag von Seite 1", intXFenKuDanach, intYFenKu, 400,, Align.Left)

    intYZuRechts = intYFenKu + intZeiUmbr    ' Position für die Zusammenfassung festlegen

    'Gesamt Netto
    If bolKleinFA = False Then
       If spnRabattRechnung.Value > 0 Then
        Paint.Text("Gesamt Netto (-" & spnRabattRechnung.Value & "%)", intXZuRechts + 3000, intYZuRechts, 400,, Align.Left)
         Else
        Paint.Text("Gesamt Netto", intXZuRechts + 3000, intYZuRechts, 400,, Align.Left)
       Endif
    Paint.Text(txtNettoGesamtRechnung.Text & "€", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    Endif

    'Erm. MwSt
    If bolKleinFA = False And Val(txtNettoErmRechnung.Text) > 0 Then
     intYZuRechts = intYZuRechts + intZeiUmbr
     Paint.Text("MwSt " & mwst_erm_rechnung_proz & "%", intXZuRechts + 3000, intYZuRechts, 400,, Align.Left)
     Paint.Text(txtMwStErmRechnung.Text & "€", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    Endif

    'Volle MwSt
    If bolKleinFA = False And Val(txtNettoVollRechnung.Text) > 0 Then
     intYZuRechts = intYZuRechts + intZeiUmbr
     Paint.Text("MwSt " & mwst_voll_rechnung_proz & "%", intXZuRechts + 3000, intYZuRechts, 400,, Align.Left)
     Paint.Text(txtMwStVollRechnung.Text & "€", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    Endif

    'Gesamtbetrag
     Paint.Font.Bold = True
     intYZuRechts = intYZuRechts + intZeiUmbr
     Paint.Text("Gesamtbetrag", intXZuRechts + 3000, intYZuRechts, 400,, Align.Left)
     Paint.Text(txtBruttoGesamtRechnung.Text & "€", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
     Paint.Font.Bold = False

     Paint.Fill

    'Linie oben und unten
     With Paint
      .LineWidth = 6
      .Rectangle(intXZuRechts + 130 * intPixelmm, intYZuRechts - 80, 53 * intPixelmm, 1)
      .Rectangle(intXZuRechts + 130 * intPixelmm, intYZuRechts + intZeiUmbr - 80, 53 * intPixelmm, 1)
      .Stroke
    End With



  intYZuRechts = intYZuRechts + 2 * intZeiUmbr

  'wenn Umsatzsteuerbefreit
  If bolKleinFA = True Then
    Paint.Text("Umsatzsteuerbefreit nach §19 UStG", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    intYZuRechts = intYZuRechts + intZeiUmbr
  Endif
  'Rabatt
  If spnRabattRechnung.Value > 0 Then
    Paint.Text("Im Betrag ist ein Rabatt von " & spnRabattRechnung.Value & "% enthalten", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    intYZuRechts = intYZuRechts + intZeiUmbr
  Endif
  'Skonto
  If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then
    If valSkontoRechnungen2.Value > 0 Then Paint.Text("Skonto " & valSkontoRechnungen2.Value & "% bis " & Format$(valZahlungsfristSkonto.Value, "yyyy-mm-dd"), intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    intYZuRechts = intYZuRechts + intZeiUmbr
  Endif
  'Zahlungsziel
  If radStatusOffenRechnung.Value = True Or radStatusBezahltRechnung.Value = True Then
    Paint.Text("Der Gesamtbetrag von " & txtBruttoGesamtRechnung.Text & "€ ist zahlbar bis " & Format$(valZahlungsfristRechnung.Value, "yyyy-mm-dd"), intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
    intYZuRechts = intYZuRechts + intZeiUmbr
        If cbxZahlungsartRechnung.Text = "Abbuchung" Then
          Paint.Text("Wir buchen den Betrag von Ihrem Konto ab:", intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
          intYZuRechts = intYZuRechts + intZeiUmbr
          Paint.Text(rsSQLKunden!bank_kunde, intXZuRechts + 3800, intYZuRechts, 400,, Align.Right)
          intYZuRechts = intYZuRechts + intZeiUmbr
        Endif
  Endif

   'Bemerkung unten
   Paint.Font.Size = 9
   intYZuRechts = intYZuRechts + intZeiUmbr
   Paint.Text(ediBemerkungRechnung.Text, intXZuRechts, intYZuRechts)

   Paint.Fill


End Select ' Case MyPrinter.Page






   'Kontaktdaten Seite unten ------------------------------------------------->
    Paint.Font.Size = 8
    'Linie
    With Paint
      .LineWidth = 6
      .Rectangle(intXURechts, intYURechts - 40, 183 * intPixelmm, 1)
      .Stroke
    End With

    Paint.Text(rsSQLFirmen!kontakt_firma, intXURechts, intYURechts, intBURechts,, Align.Left)
    Paint.Text(rsSQLFirmen!ust_idnr_firma, intXURechts + 1500, intYURechts, intBURechts,, Align.Left)
    Paint.Text(rsSQLFirmen!bankverbindung_firma, intXURechts + 3000, intYURechts, intBURechts,, Align.Right)
    Paint.Font.Size = 6
    'Unterste Zeile
    Paint.Text(rsSQLFirmen!name_firma & " - " & rsSQLFirmen!adresse_firma, intXURechts, intYURechts + 400, intBURechts,, Align.Left)

     If MyPrinter.Count = 1 And myPrinter.Page = 1 Then
      Paint.Text("Nr. " & strRechnungsnummerF & " | Seite 1 von 1", intXURechts + 3000, intYURechts + 400, intBURechts,, Align.Right)
     Endif
     If MyPrinter.Count = 2 And myPrinter.Page = 1 Then
      Paint.Text("Nr. " & strRechnungsnummerF & " | Seite 1 von 2", intXURechts + 3000, intYURechts + 400, intBURechts,, Align.Right)
     Endif
     If MyPrinter.Count = 2 And myPrinter.Page = 2 Then
      Paint.Text("Nr. " & strRechnungsnummerF & " | Seite 2 von 2", intXURechts + 3000, intYURechts + 400, intBURechts,, Align.Right)
     Endif

     Paint.Fill



 bolMahnung = False
 Application.Busy = 0

End




Public Sub chkRechnungOnline_Click()
  If chkRechnungOnline.Value = True Then
   chkRechnungPDF.Value = True
   chkRechnungPDF.Enabled = False
  Else
   chkRechnungPDF.Value = False
   chkRechnungPDF.Enabled = True
  Endif

End




' DRUCKEN ------------------------------------------------------------< Ende







' Einstellungen -----------------------------> Start

Public Sub txtEinstMwStErm_KeyPress()
  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif

End

Public Sub txtEinstMwStVoll_KeyPress()
  If key.Code >= 48 And key.Code <= 57 Then
    Else If key.Code >= 44 And key.Code <= 45 Then
    Else If key.Code = key.BackSpace Then
    Else If key.Code = key.Delete Then
    Else If key.Code = key.Tab Then
    Else If key.Code = key.Left Then
    Else If key.Code = key.Right Then
    Else
    Stop Event
  Endif

End


Public Sub btnConfigSave_Click()


  myConn.Exec("UPDATE tblText_Rechnung SET txt_anrede_herr='" & txtAnredeHerr.Text &
   "', txt_anrede_frau='" & txtAnredeFrau.Text &
   "', txt_anrede_familie='" & txtAnredeFamilie.Text &
   "', txt_anrede_herrdr='" & txtAnredeHerrDr.Text &
   "', txt_anrede_fraudr='" & txtAnredeFrauDr.Text &
   "', txt_anrede_firma='" & txtAnredeFirma.Text &
   "', txt_anrede_stadt='" & txtAnredeStadt.Text &
   "', txt_anrede_gemeinde='" & txtAnredeGemeinde.Text &
   "', txt_anrede_verein='" & txtAnredeVerein.Text &
   "', txt_status_rechnung='" & txtTextStatusRechnung.Text &
   "', txt_status_angebot='" & txtTextStatusAngebot.Text &
   "', txt_einleitung1='" & ediTextEinleitung1.Text &             ' Text Rechnung
   "', txt_einleitung2='" & ediTextEinleitung2.Text &             ' Text Angebot
   "', txt_mahnung='" & ediTextMahnung.Text &
   "', txt_bemerkung='" & ediBemerkungRechnung2.Text &            ' Bemerkung / Textende
   "' WHERE id_position_text = 1")



     Settings[strDBName & "/Einstellungen/MwStErm"] = txtEinstMwStErm.Text                    ' MwSt erm.
     Settings[strDBName & "/Einstellungen/MwStVoll"] = txtEinstMwStVoll.Text                  ' MwSt voll
     Settings[strDBName & "/Drucker/FaltmarkenRechnung"] = chkEinstFaltmarkenRechnung.Value   ' Faltmarken Rechnung
     Settings[strDBName & "/Drucker/LochmarkeRechnung"] = chkEinstLochmarkeRechnung.Value     ' Lochmarke Rechnung
     Settings[strDBName & "/Drucker/Seitenanzahl"] = spnEinstSeitenanzahlRechnung.Value       ' Seitenanzahl Rechnung
     Settings[strDBName & "/Drucker/2teSeite"] = spnEinst2teSeite.Value                       ' ab wann 2te Seite (x Rechn.Positionen)

   Settings.Save()
    cbxMwSt_einlesen()
      Message.Info("Einstellungen gespeichert")
End

Public Sub btnEinstWarenAnpassen_Click()
 'SQL SELECT
  Dim c As Integer
  Dim id_waren, mwst_waren_code, preis_ek_netto_waren, preis_vk_netto_waren, preis_ek_brutto_waren, preis_vk_brutto_waren As String

   rsSQLWaren = myConn.Exec("SELECT * FROM tblWaren ORDER BY id_waren ASC")
   If rsSQLWaren.Count = 0 Then Return
   rsSQLWaren.MoveFirst

 For c = 1 To rsSQLWaren.Count  'Waren durchlaufen
   id_waren = rsSQLWaren!id_waren
   mwst_waren_code = rsSQLWaren!mwst_waren_code
   preis_ek_netto_waren = rsSQLWaren!preis_ek_netto_waren
   preis_ek_brutto_waren = rsSQLWaren!preis_ek_brutto_waren
   preis_vk_netto_waren = rsSQLWaren!preis_vk_netto_waren
   preis_vk_brutto_waren = rsSQLWaren!preis_vk_brutto_waren

   If mwst_waren_code = 1 Then mwst_waren_code = Val(txtEinstMwStErm.Text)
   If mwst_waren_code = 2 Then mwst_waren_code = Val(txtEinstMwStVoll.Text)


    preis_ek_brutto_waren = preis_ek_netto_waren + Round(preis_ek_netto_waren * mwst_waren_code / 100, -2)
    preis_vk_brutto_waren = preis_vk_netto_waren + Round(preis_vk_netto_waren * mwst_waren_code / 100, -2)

    myConn.Exec("UPDATE tblWaren SET preis_ek_brutto_waren='" & preis_ek_brutto_waren & "', preis_vk_brutto_waren='" & preis_vk_brutto_waren & "' WHERE id_waren = " & id_waren)
    rsSQLWaren.MoveNext
 Next

 Message.Info("Bruttopreise wurden an MwSt angepasst und" & Chr(10) & "die Konfiguration wird gespeichert.")
 btnConfigSave_Click()

End



' Einstellungen -----------------------------< Ende

